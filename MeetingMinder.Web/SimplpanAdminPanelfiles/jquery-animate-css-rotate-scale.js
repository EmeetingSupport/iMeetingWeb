!function (t) { var e = "deg"; t.fn.rotate = function (r) { var a = t(this).css("transform") || "none"; if ("undefined" == typeof r) { if (a) { var n = a.match(/rotate\(([^)]+)\)/); if (n && n[1]) return n[1] } return 0 } var n = r.toString().match(/^(-?\d+(\.\d+)?)(.+)?$/); return n && (n[3] && (e = n[3]), t(this).css("transform", a.replace(/none|rotate\([^)]*\)/, "") + "rotate(" + n[1] + e + ")")), this }, t.fn.scale = function (e, r, a) { var n = t(this).css("transform"); if ("undefined" == typeof e) { if (n) { var o = n.match(/scale\(([^)]+)\)/); if (o && o[1]) return o[1] } return 1 } return t(this).css("transform", n.replace(/none|scale\([^)]*\)/, "") + "scale(" + e + ")"), this }; var r = t.fx.prototype.cur; t.fx.prototype.cur = function () { return "rotate" == this.prop ? parseFloat(t(this.elem).rotate()) : "scale" == this.prop ? parseFloat(t(this.elem).scale()) : r.apply(this, arguments) }, t.fx.step.rotate = function (r) { t(r.elem).rotate(r.now + e) }, t.fx.step.scale = function (e) { t(e.elem).scale(e.now) }; var a = t.fn.animate; t.fn.animate = function (t) { if ("undefined" != typeof t.rotate) { var r = t.rotate.toString().match(/^(([+-]=)?(-?\d+(\.\d+)?))(.+)?$/); r && r[5] && (e = r[5]), t.rotate = r[1] } return a.apply(this, arguments) } }(jQuery);