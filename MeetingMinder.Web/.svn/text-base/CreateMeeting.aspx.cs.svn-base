using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using MM.Core;
using MM.Domain;
using MM.Data;
using System.Data;
using System.Text;


namespace MeetingMinder.Web
{
    public partial class WebForm1 : System.Web.UI.Page
    {
        /// <summary>
        /// page load event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">EventArgs specifying e </param>
        protected void Page_Load(object sender, EventArgs e)
        {
            Info.Visible = false;
            Error.Visible = false;
            Page.MaintainScrollPositionOnPostBack = true;
            if (!IsPostBack)
            {
                //bind meeting list
                BindMeeting();

                //Bind User to drop down
                BindUsers();

                //Bind Entity List
                BindEntity();

                ddlForum.Items.Insert(0, new ListItem("Select Forum", "0"));

            }
        }

        /// <summary>
        /// Bind Entity list to drop down
        /// </summary>
        private void BindEntity()
        {
            try
            {
                string UserId = Convert.ToString(Session["UserId"]);
                ddlEntity.DataSource = UserEntityDataProvider.Instance.GetEntityListByUserId(Guid.Parse(UserId));
                ddlEntity.DataBind();
                ddlEntity.DataTextField = "EntityName";
                ddlEntity.DataValueField = "EntityId";
                ddlEntity.DataBind();
                ddlEntity.Items.Insert(0, new ListItem("Select Entity", "0"));
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;

            }
        }

        /// <summary> 
        /// Bind Forum List to drop down
        /// </summary>
        /// <param name="EntityId">string specifying EntityId</param>
        private void BindForum(string EntityId)
        {
            try
            {

                ddlForum.Items.Clear();

                ddlForum.Items.Insert(0, new ListItem("Select Forum", "0"));

                Guid entityId;
                if (Guid.TryParse(EntityId, out entityId))
                {
                    IList<ForumDomain> objForum = ForumDataProvider.Instance.GetForumByEntityId(entityId);
                    ddlForum.DataSource = objForum;
                    ddlForum.DataBind();
                    ddlForum.DataTextField = "ForumName";
                    ddlForum.DataValueField = "ForumId";
                    ddlForum.DataBind();
                    ddlForum.Items.Insert(0, new ListItem("Select Forum", "0"));
                }
                else
                {
                    ((Label)Error.FindControl("lblError")).Text = "Invalid forum search";
                    Error.Visible = true;
                }

            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }


        /// <summary>
        /// drop down list Selected Index Change event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">EventArgs specifying e </param>
        protected void ddlEntity_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                string strEntityId = ddlEntity.SelectedValue;
                if (strEntityId != "0")
                {
                    BindForum(strEntityId);
                }
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }


        /// <summary>
        /// Bind User List to drop down
        /// </summary>
        private void BindUsers()
        {
            try
            {
                ddlUser.DataSource = UserDataProvider.Instance.GetAllChecker();
                ddlUser.DataBind();
                ddlUser.DataValueField = "UserId";
                ddlUser.DataTextField = "UserName";
                ddlUser.DataBind();

                //Remove logged in users id from drop down
                //string UserId = Convert.ToString(Session["UserId"]);
                //ListItem UserIdToRemove = ddlUser.Items.FindByValue(UserId);
                //ddlUser.Items.Remove(UserIdToRemove);

                ddlUser.Items.Insert(0, new ListItem("Select User", "0"));
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Bind Meeintg List
        /// </summary>
        private void BindMeeting()
        {
            try
            {
                Guid UserId = Guid.Parse(Session["UserId"].ToString());
                IList<MeetingDomain> objMeeting = MeetingDataProvider.Instance.GetApprovedMeetingByUser(UserId);
                if (objMeeting.Count > 0)
                {
                    DataTable orderedList = objMeeting.OrderByDescending(p => DateTime.Parse(p.MeetingDate)).ToList().AsDataTable();
                    grdMeeting.DataSource = orderedList;
                    grdMeeting.DataBind();
                }
                else
                {
                    grdMeeting.DataSource = null;
                    grdMeeting.DataBind();
                }
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;

            }
        }

        /// <summary>
        /// Delelte Seleted Meeting
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">EventArgs specifying e </param>
        protected void lbRemoveSelected_Click(object sender, EventArgs e)
        {
            try
            {
                UserAcess objUser = new UserAcess();
                //check Delete permission
                if (objUser.isDelete(Guid.Parse(ViewState["entityId"].ToString())))
                {

                    //StringBuilder strQuery = new StringBuilder("");
                    StringBuilder strMeetingIds = new StringBuilder(",");
                    int count = 0;
                    // get all checked meeting
                    for (int i = 0; i < grdMeeting.Rows.Count; i++)
                    {


                        CheckBox chkSelect = (CheckBox)grdMeeting.Rows[i].FindControl("chkSubAdmin");
                        if (chkSelect.Checked)
                        {
                            count++;
                            string MeetingID = Convert.ToString(grdMeeting.DataKeys[i].Value.ToString());
                            // strQuery.Append("	DELETE FROM [Meeting]   WHERE  MeetingId = '" + MeetingID + "'  ");
                            strMeetingIds.Append(MeetingID + ",");
                        }
                    }
                    if (count > 0)
                    {
                        bool bStatus = MeetingDataProvider.Instance.DeleteSelectedMeeting(strMeetingIds.ToString());
                        if (!bStatus)
                        {
                            ((Label)Info.FindControl("lblName")).Text = "Meeting Deleted Successfully";
                            Info.Visible = true;
                            BindMeeting();
                        }
                        else
                        {
                            ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                            Error.Visible = true;
                        }
                    }
                    else
                    {
                        ((Label)Error.FindControl("lblError")).Text = "Please Select atleast one checkbox";
                        Error.Visible = true;
                    }

                }
                else
                {
                    ((Label)Error.FindControl("lblError")).Text = " Sorry Access denied ";
                    Error.Visible = true;
                }
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
                Info.Visible = false;
            }
        }

        /// <summary>
        /// Insert or edit values 
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">EventArgs specifying e </param>
        protected void btnInsert_Click1(object sender, EventArgs e)
        {
            try
            {
                if (txtMeetingDate.Text != "" && txtMeetingVenue.Text != "")
                {
                    MeetingDomain objMeeting = new MeetingDomain();
                    objMeeting.MeetingVenue = txtMeetingVenue.Text;
                    DateTime dtMeeting = Convert.ToDateTime(txtMeetingDate.Text);
                    DateTime dtToday = DateTime.Now;
                    if (dtMeeting <= dtToday)
                    {
                        ((Label)Error.FindControl("lblError")).Text = " Meeting date is past date";
                        Error.Visible = true;
                        return;
                    }
                    objMeeting.MeetingDate = dtMeeting.ToString("MM/dd/yyyy");
                    objMeeting.MeetingTime = txtTime.Text;
                    Guid CheckerId;
                    if (Guid.TryParse(ddlUser.SelectedValue, out CheckerId))
                    {
                        objMeeting.MeetingChecker = CheckerId;
                    }

                    objMeeting.ForumId = Guid.Parse(ddlForum.SelectedValue);
                    UserAcess objUser = new UserAcess();
                    objMeeting.CreatedBy = Guid.Parse(Session["UserId"].ToString());
                    objMeeting.UpdatedBy = Guid.Parse(Session["UserId"].ToString());


                    NoticeDomain objNotice = new NoticeDomain();

                    objNotice.UpdatedBy = Guid.Parse(Session["UserId"].ToString());
                    objNotice.CreatedBy = Guid.Parse(Session["UserId"].ToString());

                    objNotice.NoticeChecker = Guid.Parse(ddlUser.SelectedValue);
                    objNotice.NoticeMessage = "Notice is hereby given that the meeting of the " + ddlForum.SelectedItem.Text + " of " + ddlEntity.SelectedItem.Text + " will be held on " + txtMeetingDate.Text + " at " + txtTime.Text + " in " + txtMeetingVenue.Text + ". The Agenda of the Meeting is enclosed.";


                    if (objMeeting.CreatedBy == objMeeting.MeetingChecker)
                    {
                        ((Label)Error.FindControl("lblError")).Text = "Checker and Maker cannot be same ";
                        Error.Visible = true;
                        Info.Visible = false;
                        return;
                    }

                    bool isMaker = Convert.ToBoolean(Session["IsMaker"].ToString());
                    if (isMaker)
                    {
                        //Update Meeting 
                        if (hdnMeetingId.Value != "" && hdnMeetingId.Value != null)
                        {

                            //check update permission
                            if (objUser.IsEdit(Guid.Parse(ddlEntity.SelectedValue)))
                            {
                                //objMeeting.UpdatedBy = Guid.Parse(Session["UserId"].ToString());
                                objMeeting.MeetingId = Guid.Parse(hdnMeetingId.Value);

                                //Guid CreatedBy = Guid.Parse(ViewState["CreatedBy"].ToString());

                                //if (CreatedBy == objMeeting.MeetingChecker)
                                //{
                                //    ((Label)Error.FindControl("lblError")).Text = "Checker and Maker cannot be same ";
                                //    Error.Visible = true;
                                //    return;
                                //}
                                objNotice.NoticeId = objMeeting.MeetingId;
                                MeetingDataProvider.Instance.Update(objMeeting);

                                NoticeDataProvider.Instance.Update(objNotice);
                                ((Label)Info.FindControl("lblName")).Text = " Meeting updated with notice successfully";


                            }
                            else
                            {
                                ((Label)Error.FindControl("lblError")).Text = " Sorry Access denied ";
                                Error.Visible = true;
                                Info.Visible = false;
                            }
                        }
                        //Insert Meeting
                        else
                        {

                            //check add permission
                            if (objUser.IsAdd(Guid.Parse(ddlEntity.SelectedValue)))
                            {

                                objMeeting = MeetingDataProvider.Instance.Insert(objMeeting);
                                objNotice.MeetingId = objMeeting.MeetingId;
                                NoticeDataProvider.Instance.Insert(objNotice);
                                ((Label)Info.FindControl("lblName")).Text = " Meeting inserted with notice successfully";
                            }
                            else
                            {
                                ((Label)Error.FindControl("lblError")).Text = " Sorry Access denied ";
                                Error.Visible = true;
                                Info.Visible = false;
                            }
                        }

                        Info.Visible = true;
                        BindMeeting();
                        ClearData();

                    }
                    else
                    {
                        ((Label)Error.FindControl("lblError")).Text = " Sorry you are not maker ";
                        Error.Visible = true;
                        Info.Visible = false;
                    }
                }
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
                Info.Visible = false;
            }
        }

        /// <summary>
        /// Insertion or Updation cancel
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">EventArgs specifying e </param>
        protected void btnCancel_Click1(object sender, EventArgs e)
        {
            ClearData();
        }

        /// <summary>
        /// Clear form data
        /// </summary>
        private void ClearData()
        {
            ddlForum.Items.Clear();
            ddlForum.Items.Insert(0, new ListItem("Select Forum", "0"));
            txtMeetingDate.Text = "";
            txtMeetingVenue.Text = "";
            hdnMeetingId.Value = "";
            ddlUser.SelectedValue = "0";
            ddlEntity.SelectedValue = "0";

            txtTime.Text = "";
            btnInsert.Text = "Save";
        }

        /// <summary>
        /// Code to PageIndex Changing
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdMeeting_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            try
            {
                grdMeeting.PageIndex = e.NewPageIndex;
                BindMeeting();
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Event That Fired on RowCommand
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdMeetingRowCommand(object sender, GridViewCommandEventArgs e)
        {
            try
            {
                //delete meeting
                if (e.CommandName.ToLower().Equals("delete"))
                {
                    bool isMaker = Convert.ToBoolean(Session["IsMaker"].ToString());
                    if (isMaker)
                    {
                        string MeetingId = Convert.ToString(e.CommandArgument.ToString());
                        string[] ids = MeetingId.Split(',');
                        UserAcess objUser = new UserAcess();
                        //check Delete permission
                        if (objUser.isDelete(Guid.Parse(ids[1])))
                        {
                            GridViewRow row = (GridViewRow)(((ImageButton)e.CommandSource).NamingContainer);
                            Label lblMeeting = (Label)row.Cells[0].FindControl("lblMeetingDate");
                            if (lblMeeting.Text.Length > 0)
                            {
                                DateTime dtNow = DateTime.Now;
                                DateTime dtMeetingDate = Convert.ToDateTime(lblMeeting.Text);
                                if (dtMeetingDate < dtNow)
                                {
                                    ((Label)Error.FindControl("lblError")).Text = " Sorry you can't delete past meeting. ";
                                    Error.Visible = true;
                                    return;
                                }
                            }
                            bool bStatus = MeetingDataProvider.Instance.Delete(Guid.Parse(ids[0]));
                            if (bStatus == false)
                            {
                                ((Label)Info.FindControl("lblName")).Text = "Meeting Deleted Successfully";
                                Info.Visible = true;
                            }
                            else
                            {
                                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                                Error.Visible = true;
                            }
                            BindMeeting();
                        }
                        else
                        {
                            ((Label)Error.FindControl("lblError")).Text = " Sorry Access denied ";
                            Error.Visible = true;
                        }
                    }
                    else
                    {
                        ((Label)Error.FindControl("lblError")).Text = " Sorry you are not maker ";
                        Error.Visible = true;
                    }
                }

                //Edit 
                if (e.CommandName.ToLower().Equals("edit"))
                {
                    UserAcess objUser = new UserAcess();


                    string strMeetingId = Convert.ToString(e.CommandArgument);
                    string[] ids = strMeetingId.Split(',');
                    //check edit permission
                    if (objUser.IsEdit(Guid.Parse(ids[2])))
                    {
                        MeetingDomain objMeetingDomain = MeetingDataProvider.Instance.Get(Guid.Parse(ids[0]));
                        DateTime dtNow = DateTime.Now;
                        DateTime dtMeetingDate = Convert.ToDateTime(objMeetingDomain.MeetingDate);
                        if (dtMeetingDate < dtNow)
                        {
                            ((Label)Error.FindControl("lblError")).Text = " Sorry you cant edit past meeting. ";
                            Error.Visible = true;
                            return;
                        }
                        ddlEntity.SelectedValue = Convert.ToString(ids[2]);
                        ddlEntity_SelectedIndexChanged(sender, e);

                        ddlForum.SelectedValue = Convert.ToString(ids[1]);

                        //convert date to dd/mm/yyyy formate
                        txtMeetingDate.Text = Convert.ToDateTime(objMeetingDomain.MeetingDate).ToString("MM/dd/yyyy");
                        txtMeetingVenue.Text = objMeetingDomain.MeetingVenue;
                        hdnMeetingId.Value = Convert.ToString(objMeetingDomain.MeetingId);
                        txtTime.Text = Convert.ToString(objMeetingDomain.MeetingTime);
                        // ddlUser.SelectedValue = Convert.ToString(objMeetingDomain.MeetingChecker);

                        if (ddlUser.Items.FindByValue(
Convert.ToString(objMeetingDomain.MeetingChecker)) != null)
                        {
                            ddlUser.SelectedValue = Convert.ToString(objMeetingDomain.MeetingChecker);
                        }
                        else
                        {
                            ddlUser.SelectedValue = "0";
                        }

                        ViewState["CreatedBy"] = objMeetingDomain.CreatedBy;
                        btnInsert.Text = "Update";
                    }
                    else
                    {
                        ((Label)Error.FindControl("lblError")).Text = " Sorry Access denied ";
                        Error.Visible = true;
                    }
                }

                // view meeting
                if (e.CommandName.ToLower().Equals("view"))
                {
                    string MeetingId = Convert.ToString(e.CommandArgument.ToString());
                    Response.Redirect("AgendaMaster.aspx?id=" + MeetingId);
                }
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Row deleting event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdMeeting_RowDeleting(object sender, GridViewDeleteEventArgs e)
        {

        }

        /// <summary>
        /// Code to PageIndex Changing
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdMeeting_RowEditing(object sender, GridViewEditEventArgs e)
        {
            //try
            //{



            //}
            //catch (Exception ex)
            //{
            //    ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
            //    Error.Visible = true;
            //}
        }

        /// <summary>
        /// Function Used For Gridview Sorting
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdMeeting_Sorting(object sender, GridViewSortEventArgs e)
        {
            try
            {
                Guid UserId = Guid.Parse(Session["UserId"].ToString());

                DataTable dt = (DataTable)MeetingDataProvider.Instance.GetApprovedMeetingByUser(UserId).AsDataTable();
                DataView dv = new DataView(dt);
                if (Convert.ToString(ViewState["sortDirection"]) == "asc")
                {
                    ViewState["sortDirection"] = "dsc";
                    dv.Sort = e.SortExpression + " DESC";
                }
                else
                {
                    ViewState["sortDirection"] = "asc";
                    dv.Sort = e.SortExpression + " ASC";
                }

                grdMeeting.DataSource = dv;
                grdMeeting.DataBind();
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }
    }
}