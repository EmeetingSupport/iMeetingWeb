using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using MM.Core;
using MM.Domain;
using MM.Data;
using System.IO;
using System.Data;

namespace MeetingMinder.Web
{
    public partial class UploadMinutes : System.Web.UI.Page
    {
        /// <summary>
        /// page load event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">EventArgs specifying e </param>
        protected void Page_Load(object sender, EventArgs e)
        {
            Info.Visible = false;
            Error.Visible = false;
            Page.MaintainScrollPositionOnPostBack = true;
            if (!IsPostBack)
            {
                //bind meeting list
                BindCheckers();

                //Bind Entity List
                BindEntity();

                ddlForum.Items.Insert(0, new ListItem("Select Forum", "0"));

                ddlMeeting.Items.Insert(0, new ListItem("Select Meeting", "0"));

                //Bind Mintes to grid
                BindUploadMinutes();
            }
        }

        /// <summary>
        /// Bind uplod minutes to grid
        /// </summary>
        private void BindUploadMinutes()
        {
            try
            {
                string UserId = Convert.ToString(Session["UserId"]);
                grdUploadMinutes.DataSource = UploadMintesDataProvider.Instance.GetUploadMinutesByUser(Guid.Parse(UserId));
                grdUploadMinutes.DataBind();
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;

            }
        }

        /// <summary>
        /// Bind Entity list to drop down 
        /// </summary>
        private void BindEntity()
        {
            try
            {
                string UserId = Convert.ToString(Session["UserId"]);
                ddlEntity.DataSource = UserEntityDataProvider.Instance.GetEntityListByUserId(Guid.Parse(UserId));
                ddlEntity.DataBind();
                ddlEntity.DataTextField = "EntityName";
                ddlEntity.DataValueField = "EntityId";
                ddlEntity.DataBind();
                ddlEntity.Items.Insert(0, new ListItem("Select Entity", "0"));
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;

            }
        }

        /// <summary>
        /// Bind Checkers List to drop down
        /// </summary>
        private void BindCheckers()
        {
            try
            {
                ddlUser.DataSource = UserDataProvider.Instance.GetAllChecker();
                ddlUser.DataBind();
                ddlUser.DataValueField = "UserId";
                ddlUser.DataTextField = "UserName";
                ddlUser.DataBind();

                //Remove logged in users id from drop down
                // string UserId = Convert.ToString(Session["UserId"]);
                //  ListItem UserIdToRemove = ddlUser.Items.FindByValue(UserId);
                //  ddlUser.Items.Remove(UserIdToRemove);

                ddlUser.Items.Insert(0, new ListItem("Select User", "0"));
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// drop down list  Selected Index Change event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">EventArgs specifying e </param>
        protected void ddlForum_SelectedIndexChanged(object sender, EventArgs e)
        {
            string strForumId = ddlForum.SelectedValue;
            if (strForumId != "0")
            {
                BindMeeting(strForumId);
            }
        }

        /// <summary>
        /// BInd Meeting list to drop down
        /// </summary>
        /// <param name="ForumId">string specifying ForumId</param>
        private void BindMeeting(string ForumId)
        {
            try
            {
                ddlMeeting.Items.Clear();
                ddlMeeting.Items.Insert(0, new ListItem("Select Meeting", "0"));
                Guid forumId;
                if (Guid.TryParse(ForumId, out forumId))
                {
                    IList<MeetingDomain> objMeeting = MeetingDataProvider.Instance.GetMeetingByForUploadMinutes(forumId);
                    DateTime dtToday = DateTime.Now.Date;
                    foreach (MeetingDomain item in objMeeting)
                    {
                        DateTime dtMeeting = Convert.ToDateTime(item.MeetingDate);
                        if (dtMeeting < dtToday)
                        {
                            ddlMeeting.Items.Add(new ListItem(dtMeeting.ToString("dd MMM yyyy") + ' ' + item.MeetingVenue + ' ' + item.MeetingTime, item.MeetingId.ToString()));
                        }
                    }
                    //ddlMeeting.DataSource = objMeeting;
                    //ddlMeeting.DataBind();

                    ////Past date ........
                    //ddlMeeting.DataTextField = "MeetingDate";
                    //ddlMeeting.DataValueField = "MeetingId";
                    //ddlMeeting.DataBind();


                }
                else
                {
                    ((Label)Error.FindControl("lblError")).Text = "Invalid meeting search";
                    Error.Visible = true;
                }
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Bind Entity list to drop down
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">EventArgs specifying e </param>
        protected void ddlEntity_SelectedIndexChanged(object sender, EventArgs e)
        {
            string strEntityId = ddlEntity.SelectedValue;
            if (strEntityId != "0")
            {
                BindForum(strEntityId);
            }
        }

        /// <summary>
        /// Bind forums to drop down
        /// </summary>
        /// <param name="EntityId">string specifying EntityId</param>
        private void BindForum(string EntityId)
        {
            try
            {

                ddlForum.Items.Clear();

                ddlForum.Items.Insert(0, new ListItem("Select Forum", "0"));

                Guid entityId;
                if (Guid.TryParse(EntityId, out entityId))
                {
                    IList<ForumDomain> objForum = ForumDataProvider.Instance.GetForumByEntityId(entityId);
                    ddlForum.DataSource = objForum;
                    ddlForum.DataBind();
                    ddlForum.DataTextField = "ForumName";
                    ddlForum.DataValueField = "ForumId";
                    ddlForum.DataBind();
                    ddlForum.Items.Insert(0, new ListItem("Select Forum", "0"));
                }
                else
                {
                    ((Label)Error.FindControl("lblError")).Text = "Invalid forum search";
                    Error.Visible = true;
                }

            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }


        /// <summary>
        /// button submit click event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">EventArgs specifying e </param>
        protected void btnSubmit_Click(object sender, EventArgs e)
        {
            try
            {
                UploadMinutesDomain objUploadMinutes = new UploadMinutesDomain();
                objUploadMinutes.MeetingId = Guid.Parse(ddlMeeting.SelectedValue);
                objUploadMinutes.UpdatedBy = Guid.Parse(Session["UserId"].ToString());
                objUploadMinutes.CreatedBy = Guid.Parse(Session["UserId"].ToString());
                objUploadMinutes.UplaodMinuteChecker = Guid.Parse(ddlUser.SelectedValue);
                string fileName = "";

                if (objUploadMinutes.CreatedBy == objUploadMinutes.UplaodMinuteChecker)
                {
                    ((Label)Error.FindControl("lblError")).Text = "Checker and Maker cannot be same ";
                    Error.Visible = true;
                    return;
                }


                bool isMaker = Convert.ToBoolean(Session["IsMaker"].ToString());
                if (isMaker)
                {

                    if (hdnUploadId.Value != "")
                    {
                        UserAcess objUser = new UserAcess();
                        if (objUser.IsAdd(Guid.Parse(ddlEntity.SelectedValue)))
                        {

                            if (fuMinutes.HasFile)
                            {
                                string savePath = Convert.ToString(System.Configuration.ConfigurationManager.AppSettings["UploadMinutes"]);
                                string contentType = fuMinutes.PostedFile.ContentType;

                                string ext = Path.GetExtension(fuMinutes.FileName);

                                if (ext.ToLower().Equals(".pdf"))
                                {
                                    fileName = DateTime.Now.Ticks + ext;
                                    fuMinutes.PostedFile.SaveAs(Server.MapPath(savePath + fileName));
                                    objUploadMinutes.UploadFile = fileName;

                                    if (ViewState["file"] != null)
                                    {
                                        string file = Convert.ToString(ViewState["file"]);
                                        File.Delete(Server.MapPath(savePath + file));
                                        ViewState["file"] = null;
                                    }
                                }
                                else
                                {
                                    ((Label)Error.FindControl("lblError")).Text = "Upload minutes file must be pdf";
                                    Error.Visible = true;
                                    return;
                                }
                            }
                            else
                            {
                                if (ViewState["file"] != null)
                                {
                                    objUploadMinutes.UploadFile = Convert.ToString(ViewState["file"]);
                                }
                                else
                                {
                                    ((Label)Error.FindControl("lblError")).Text = "Please upload pdf";
                                    Error.Visible = true;
                                    return;
                                }
                            }

                            objUploadMinutes.UploadMinuteId = Guid.Parse(hdnUploadId.Value);
                            bool status = UploadMintesDataProvider.Instance.Update(objUploadMinutes);
                            if (!status)
                            {
                                ((Label)Info.FindControl("lblName")).Text = "Meeting Minutes updated successfully";
                                Info.Visible = true;
                                ClearData();
                            }
                            else
                            {
                                ((Label)Error.FindControl("lblError")).Text = "Meeting Minutes updation failed";
                                Error.Visible = true;
                            }
                        }
                        else
                        {
                            ((Label)Error.FindControl("lblError")).Text = " Sorry Access denied ";
                            Error.Visible = true;
                        }
                    }
                    else
                    {
                        UserAcess objUser = new UserAcess();

                        //check edit permission
                        if (objUser.IsAdd(Guid.Parse(ddlEntity.SelectedValue)))
                        {
                            if (fuMinutes.HasFile)
                            {
                                string savePath = Convert.ToString(System.Configuration.ConfigurationManager.AppSettings["UploadMinutes"]);
                                string contentType = fuMinutes.PostedFile.ContentType;

                                string ext = Path.GetExtension(fuMinutes.FileName);

                                if (ext.ToLower().Equals(".pdf"))
                                {
                                    fileName = DateTime.Now.Ticks + ext;
                                    fuMinutes.PostedFile.SaveAs(Server.MapPath(savePath + fileName));
                                    objUploadMinutes.UploadFile = fileName;

                                    if (ViewState["file"] != null)
                                    {
                                        string file = Convert.ToString(ViewState["file"]);
                                        File.Delete(Server.MapPath(savePath + file));
                                        ViewState["file"] = null;
                                    }
                                }
                                else
                                {
                                    ((Label)Error.FindControl("lblError")).Text = "Upload minutes file must be pdf";
                                    Error.Visible = true;
                                    return;
                                }
                            }
                            else
                            {
                                if (ViewState["file"] != null)
                                {
                                    objUploadMinutes.UploadFile = Convert.ToString(ViewState["file"]);
                                }
                                else
                                {
                                    ((Label)Error.FindControl("lblError")).Text = "Please upload pdf";
                                    Error.Visible = true;
                                    return;
                                }
                            }

                            UploadMintesDataProvider.Instance.Insert(objUploadMinutes);
                            ((Label)Info.FindControl("lblName")).Text = "Meeting Minutes inserted successfully";
                            Info.Visible = true;
                            ClearData();
                        }
                        else
                        {
                            ((Label)Error.FindControl("lblError")).Text = " Sorry Access denied ";
                            Error.Visible = true;
                            Info.Visible = false;
                        }
                    }
                    BindUploadMinutes();
                }
                else
                {
                    ((Label)Error.FindControl("lblError")).Text = " Sorry you are not maker ";
                    Error.Visible = true;
                }
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Clear Form data
        /// </summary>
        private void ClearData()
        {
            ddlUser.SelectedValue = "0";
            ddlMeeting.Items.Clear();
            ddlMeeting.Items.Insert(0, new ListItem("Select Meeting", "0"));
            ddlForum.Items.Clear();
            ddlForum.Items.Insert(0, new ListItem("Select Forum", "0"));
            ddlEntity.SelectedValue = "0";

            btnSubmit.Text = "Submit";
            ViewState["file"] = null;
            lnkView.Visible = false;
            hdnUploadId.Value = "";
            rfvMinutes.Enabled = true;

        }

        /// <summary>
        /// Button cancel event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">EventArgs specifying e </param>
        protected void btnCancel_Click(object sender, EventArgs e)
        {
            ClearData();
        }

        /// <summary>
        /// gridview pageindexchange event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdUploadMinutes_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            grdUploadMinutes.PageIndex = e.NewPageIndex;
            BindUploadMinutes();
        }

        /// <summary>
        /// Gridview rowcommand event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdUploadMinutesRowCommand(object sender, GridViewCommandEventArgs e)
        {
            try
            {
                UserAcess objUser = new UserAcess();
                if (e.CommandName.ToLower().Equals("view"))
                {

                    string savePath = Convert.ToString(System.Configuration.ConfigurationManager.AppSettings["UploadMinutes"]);
                    string fileName = Convert.ToString(e.CommandArgument);
                    //Set the appropriate ContentType.
                    Response.ContentType = "Application/pdf";
                    //Get the physical path to the file.
                    string FilePath = Server.MapPath(savePath + fileName);
                    //Write the file directly to the HTTP content output stream.
                    Response.WriteFile(FilePath);
                    Response.End();
                }

                if (e.CommandName.ToLower().Equals("edit"))
                {
                    string strUploadMinId = Convert.ToString(e.CommandArgument);
                    string[] ids = strUploadMinId.Split(',');
                    if (objUser.IsEdit(Guid.Parse(ids[3])))
                    {

                        UploadMinutesDomain objUpload = UploadMintesDataProvider.Instance.Get(Guid.Parse(ids[0]));
                        ddlEntity.SelectedValue = ids[3];
                        ddlEntity_SelectedIndexChanged(sender, e);
                        ddlForum.SelectedValue = ids[2];
                        ddlForum_SelectedIndexChanged(sender, e);
                        ddlMeeting.SelectedValue = ids[1];

                        //ddlUser.SelectedValue = objUpload.UplaodMinuteChecker.ToString();
                        if (ddlUser.Items.FindByValue(
Convert.ToString(objUpload.UplaodMinuteChecker)) != null)
                        {
                            ddlUser.SelectedValue = objUpload.UplaodMinuteChecker.ToString();
                        }
                        else
                        {
                            ddlUser.SelectedValue = "0";
                        }
                        ViewState["file"] = objUpload.UploadFile;
                        lnkView.Visible = true;
                        hdnUploadId.Value = objUpload.UploadMinuteId.ToString();
                        rfvMinutes.Enabled = false;
                        btnSubmit.Text = "Update";
                    }
                    else
                    {
                        ((Label)Error.FindControl("lblError")).Text = " Sorry Access denied ";
                        Error.Visible = true;
                    }
                }
                if (e.CommandName.ToLower().Equals("delete"))
                {
                    bool isMaker = Convert.ToBoolean(Session["IsMaker"].ToString());
                    if (isMaker)
                    {
                        string strUploadMinId = Convert.ToString(e.CommandArgument);
                        string[] ids = strUploadMinId.Split(',');
                        if (objUser.isDelete(Guid.Parse(ids[1])))
                        {
                            bool status = UploadMintesDataProvider.Instance.Delete(Guid.Parse(ids[0]));
                            if (!status)
                            {
                                ((Label)Info.FindControl("lblName")).Text = "Meeting Minutes deleted successfully";
                                Info.Visible = true;
                                BindUploadMinutes();
                            }
                            else
                            {
                                ((Label)Error.FindControl("lblError")).Text = "Meeting Minutes deletion failed";
                                Error.Visible = true;
                            }

                        }
                        else
                        {
                            ((Label)Error.FindControl("lblError")).Text = " Sorry Access denied ";
                            Error.Visible = true;
                        }
                    }
                    else
                    {
                        ((Label)Error.FindControl("lblError")).Text = " Sorry you are not maker ";
                        Error.Visible = true;
                    }
                }

            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Gridview sorting event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdUploadMinutes_Sorting(object sender, GridViewSortEventArgs e)
        {
            string UserId = Convert.ToString(Session["UserId"]);
            DataTable dt = (DataTable)UploadMintesDataProvider.Instance.GetUploadMinutesByUser(Guid.Parse(UserId)).AsDataTable();
            DataView dv = new DataView(dt);
            if (Convert.ToString(ViewState["sortDirection"]) == "asc")
            {
                ViewState["sortDirection"] = "dsc";
                dv.Sort = e.SortExpression + " DESC";
            }
            else
            {
                ViewState["sortDirection"] = "asc";
                dv.Sort = e.SortExpression + " ASC";
            }

            grdUploadMinutes.DataSource = dv;
            grdUploadMinutes.DataBind();
        }

        /// <summary>
        /// Gridview RowEditing event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdUploadMinutes_RowEditing(object sender, GridViewEditEventArgs e)
        {

        }

        /// <summary>
        /// Gridview RowDeleting event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdUploadMinutes_RowDeleting(object sender, GridViewDeleteEventArgs e)
        {

        }

        /// <summary>
        /// View uploaded file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void lnkView_Click(object sender, EventArgs e)
        {
            try
            {
                string fileName = Convert.ToString(ViewState["file"]);

                string savePath = Convert.ToString(System.Configuration.ConfigurationManager.AppSettings["UploadMinutes"]);

                //Set the appropriate ContentType.
                Response.ContentType = "application/octet-stream";
                //Get the physical path to the file.
                string FilePath = Server.MapPath(savePath + fileName);

                Response.AddHeader("Content-Disposition", "attachment; filename=" + fileName);
                Response.WriteFile(FilePath);
                Response.End();
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }
    }
}