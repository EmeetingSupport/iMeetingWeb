using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using MM.Core;
using MM.Domain;
using MM.Data;
using System.Data;
using System.Text;
using System.IO;
using System.Configuration;
using System.Net.Mail;

namespace MeetingMinder.Web
{
    public partial class ApprovalMaster : System.Web.UI.Page
    {
        /// <summary>
        /// page load event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">EventArgs specifying e </param>
        protected void Page_Load(object sender, EventArgs e)
        {
            Info.Visible = false;
            Error.Visible = false;
            Page.MaintainScrollPositionOnPostBack = true;
            if (Request.QueryString["fileMin"] != null)
            {
                try
                {
                    string fileName = Convert.ToString(Request.QueryString["fileMin"]);
                    string savePath = Convert.ToString(System.Configuration.ConfigurationManager.AppSettings["UploadMinutes"]);

                    //Set the appropriate ContentType.
                    Response.ContentType = "application/octet-stream";
                    //Get the physical path to the file.
                    string FilePath = Server.MapPath(savePath + fileName);

                    Response.AddHeader("Content-Disposition", "attachment; filename=" + fileName);
                    Response.WriteFile(FilePath);
                    Response.End();
                }
                catch (Exception ex)
                {
                    ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                    Error.Visible = true;
                }
            }

            if (Request.QueryString["fileForum"] != null)
            {
                try
                {
                    string fileName = Convert.ToString(Request.QueryString["fileForum"]);
                    string savePath = Convert.ToString(System.Configuration.ConfigurationManager.AppSettings["MembesInfo"]);

                    //Set the appropriate ContentType.
                    Response.ContentType = "application/octet-stream";
                    //Get the physical path to the file.
                    string FilePath = Server.MapPath(savePath + fileName);

                    Response.AddHeader("Content-Disposition", "attachment; filename=" + fileName);
                    Response.WriteFile(FilePath);
                    Response.End();
                }
                catch (Exception ex)
                {
                    ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                    Error.Visible = true;
                }
            }

            if (Request.QueryString["file"] != null)
            {
                try
                {
                    string fileName = Convert.ToString(Request.QueryString["file"]);
                    string savePath = Convert.ToString(System.Configuration.ConfigurationManager.AppSettings["Agenda"]);

                    //Set the appropriate ContentType.
                    Response.ContentType = "application/octet-stream";
                    //Get the physical path to the file.
                    string FilePath = Server.MapPath(savePath + fileName);

                    Response.AddHeader("Content-Disposition", "attachment; filename=" + fileName);
                    Response.WriteFile(FilePath);
                    Response.End();
                }
                catch (Exception ex)
                {
                    ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                    Error.Visible = true;
                }
            }

            if (!IsPostBack)
            {
                //bind meeting list
                //BindMeeting();
            }
        }

        /// <summary>
        /// Event That Fired on Selected IndexChange 
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">EventArgs specifying e </param>
        protected void ddlMaster_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                //      int SelectedVal = Convert.ToInt16(ddlMaster.SelectedValue);
                string SelectedVal = ddlMaster.SelectedValue;
                Guid UserId = Guid.Parse(Session["UserId"].ToString());
                if (SelectedVal != "0")
                {
                    BindData(SelectedVal, UserId);
                }
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Bind Data to grid
        /// </summary>
        /// <param name="SelectedVal">string specifying SelectedValue</param>
        /// <param name="UserId">Guid specifying UserId</param>
        private void BindData(string SelectedVal, Guid UserId)
        {
            try
            {
                switch (SelectedVal)
                {
                case "Entity":
                BindEntity(UserId);
                break;

                case "Forum":
                BindForum(UserId);
                break;

                case "Meeting":
                BindMeeting(UserId);
                break;

                case "User":
                BindUser(UserId);
                break;

                case "Notice":
                BindNotice(UserId);
                break;

                case "Agenda":
                BindAgendaMeetings(UserId);
                break;

                case "Minutes":
                BindMinutes(UserId);
                break;
                }
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Bind unapproved upload minutes
        /// </summary>
        /// <param name="UserId">Guid specifying UserId</param>
        private void BindMinutes(Guid UserId)
        {
            try
            {
                grdMinutes.Visible = true;
                grdMinutes.DataSource = UploadMintesDataProvider.Instance.GetUnapprovedMinutes(UserId);
                grdMinutes.DataBind();

                grdNotice.Visible = false;
                grdApprove.Visible = false;
                grdForum.Visible = false;
                grdMeeting.Visible = false;
                grdUser.Visible = false;
                grdAgenda.Visible = false;
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Bind notice list to grid
        /// </summary>
        /// <param name="UserId">Guid specifying UserId</param>
        private void BindNotice(Guid UserId)
        {
            try
            {
                grdNotice.Visible = true;
                grdNotice.DataSource = NoticeDataProvider.Instance.GetUnapprovedNotice(UserId);
                grdNotice.DataBind();

                grdApprove.Visible = false;
                grdForum.Visible = false;
                grdMeeting.Visible = false;
                grdUser.Visible = false;
                grdMinutes.Visible = false;
                grdAgenda.Visible = false;
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Bind Users List to approve
        /// <param name="UserId">Guid specifying UserId</param>
        /// </summary>
        private void BindUser(Guid UserId)
        {
            try
            {
                grdUser.Visible = true;
                grdUser.DataSource = ApprovalDataProvider.Instance.GetUnApprovedUser(UserId);
                grdUser.DataBind();

                grdApprove.Visible = false;
                grdForum.Visible = false;
                grdMeeting.Visible = false;
                grdNotice.Visible = false;
                grdAgenda.Visible = false;
                grdMinutes.Visible = false;
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Bind Meeting List to approve
        /// </summary>
        /// <param name="UserId">Guid specifying UserId</param>
        private void BindMeeting(Guid UserId)
        {
            try
            {
                grdMeeting.Visible = true;
                grdMeeting.DataSource = ApprovalDataProvider.Instance.GetUnApprovedMeetings(UserId);
                grdMeeting.DataBind();

                grdApprove.Visible = false;
                grdForum.Visible = false;
                grdUser.Visible = false;
                grdNotice.Visible = false;
                grdAgenda.Visible = false;
                grdMinutes.Visible = false;
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Bind forums list to approve
        /// </summary>
        /// <param name="UserId">Guid specifying UserId</param>
        private void BindForum(Guid UserId)
        {
            try
            {
                grdForum.Visible = true;
                grdForum.DataSource = ApprovalDataProvider.Instance.GetUnApprovedForums(UserId);
                grdForum.DataBind();

                grdApprove.Visible = false;
                grdMeeting.Visible = false;
                grdUser.Visible = false;
                grdNotice.Visible = false;
                grdAgenda.Visible = false;
                grdMinutes.Visible = false;
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Bind entity list to approve
        /// </summary>
        /// <param name="UserId">Guid specifying UserId</param>
        private void BindEntity(Guid UserId)
        {
            try
            {
                grdApprove.Visible = true;
                grdApprove.DataSource = ApprovalDataProvider.Instance.GetUnApprovedEntity(UserId);
                grdApprove.DataBind();

                grdForum.Visible = false;
                grdMeeting.Visible = false;
                grdUser.Visible = false;
                grdNotice.Visible = false;
                grdAgenda.Visible = false;
                grdMinutes.Visible = false;
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }


        /// <summary>
        /// Bind agenda meetings by UserId
        /// </summary>
        /// <param name="UserId">Guid specifying UserId</param>
        private void BindAgendaMeetings(Guid UserId)
        {
            try
            {
                grdAgenda.Visible = true;
                grdAgenda.DataSource = ApprovalDataProvider.Instance.GetUnApprovedMeetingForAgenda(UserId);
                grdAgenda.DataBind();

                grdForum.Visible = false;
                grdMeeting.Visible = false;
                grdUser.Visible = false;
                grdNotice.Visible = false;
                grdApprove.Visible = false;
                grdMinutes.Visible = false;
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }
        /// <summary>
        /// Event That Fired on RowCommand
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdForumRowCommand(object sender, GridViewCommandEventArgs e)
        {
            try
            {
                string UserId = Convert.ToString(Session["UserId"]);
                //approve Forum item
                if (e.CommandName.ToLower().Equals("approve"))
                {
                    GridViewRow row = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);
                    CheckBox chApprove = (CheckBox)row.Cells[0].FindControl("chkEnable");

                    string str_Ipad = chApprove.Checked ? " and Enabled On Ipad App" : "";

                    string strForumId = Convert.ToString(e.CommandArgument);
                    SaveAction("Approved", "Forum", Guid.Parse(UserId), Guid.Parse(strForumId), chApprove.Checked);
                    ((Label)Info.FindControl("lblName")).Text = "Forum approved Successfully" + str_Ipad;
                    BindData("Forum", Guid.Parse(UserId));
                    Info.Visible = true;
                }

                //reject Forum  item
                if (e.CommandName.ToLower().Equals("decline"))
                {
                    string strForumId = Convert.ToString(e.CommandArgument);
                    SaveAction("Declined", "Forum", Guid.Parse(UserId), Guid.Parse(strForumId), false);

                    ((Label)Info.FindControl("lblName")).Text = "Forum Declined Successfully";
                    BindData("Forum", Guid.Parse(UserId));
                    Info.Visible = true;
                }


                if (e.CommandName.ToLower().Equals("view"))
                {
                    string strEntityId = Convert.ToString(e.CommandArgument);
                    ForumDomain objForum = ForumDataProvider.Instance.Get(Guid.Parse(strEntityId));
                    string strLink = string.IsNullOrEmpty(objForum.MembersInfo) ? "<label  style='color:red'>No File uplaoded</label>" : "<a  href='ApprovalMaster.aspx?fileForum=" + objForum.MembersInfo + @"' target='_blank'  style='color:blue'>View</a>";

                    string str = @"<div  style='margin-bottom:15px'>
                    <table class='datatable'>
                       <tr><td>
                                    <label>
                                     Forum Full Name:
                                    </label>
                                </td>
                          <td>
                  " + objForum.ForumName + @"
                                </td>

                                        </tr>
                                <tr><td>
                                    <label>
                                     Forum Short Name  :
                                    </label>
                                </td>

                                <td>
                        " + objForum.ForumShortName + @"
                                </td>
</tr>
<tr>
<td><label>
                                     Entity  Name  :
                                    </label></td>
<td>" + objForum.EntityName + @"<td>
</tr>

<tr>
                                   <td>
                                    <label>
                                    Members Info :
                                    </label>
                                </td>
                                <td>
                           " + strLink + @"
                                  
                                </td></tr>
<tr>
                                   <td>
                                    <label>
                                    Enable :
                                    </label>
                                </td>
                                <td>
                              " + objForum.IsEnable + @"
                                  
                                </td></tr>

                                   <tr><td>
                                    <label>
                                    Created On  :
                                    </label>
                                </td>
                                <td>
" + objForum.CreatedOn.ToString("dd/MM/yyyy") + @"
</td></tr></table>
<div>";
                    lblDetails.Text = str;
                    string strScript = @"<script type='text/javascript'> $(function() {
$( '#dialog' ).attr('title','Forum : " + objForum.ForumName + @"' );
$( '#dialog' ).attr('style','display:block');
$( '#dialog' ).dialog();});</script>";

                    ClientScript.RegisterStartupScript(this.GetType(), "Success", strScript);

                }

            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Approve or reject 
        /// </summary>
        /// <param name="Action">string specifying Action</param>
        /// <param name="Transaction">string specifying Transaction</param>
        /// <param name="UserId">Guid specifying UserId</param>
        /// <param name="Id">Guid specifying Id</param>
        /// <param name="EnableOnIpad">bool specifying EnabledOnIpad</param>
        private void SaveAction(string Action, string Transaction, Guid UserId, Guid Id, bool EnableOnIpad)
        {
            try
            {
                ApprovalDataProvider.Instance.UpdateStaus(UserId, Id, Action, Transaction, EnableOnIpad);
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Function Used For Gridview Sorting
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdForum_Sorting(object sender, GridViewSortEventArgs e)
        {
            try
            {
                Guid UserId = Guid.Parse(Session["UserId"].ToString());
                DataTable dt = (DataTable)ApprovalDataProvider.Instance.GetUnApprovedForums(UserId).AsDataTable();
                DataView dv = new DataView(dt);
                if (Convert.ToString(ViewState["sortDirection"]) == "asc")
                {
                    ViewState["sortDirection"] = "dsc";
                    dv.Sort = e.SortExpression + " DESC";
                }
                else
                {
                    ViewState["sortDirection"] = "asc";
                    dv.Sort = e.SortExpression + " ASC";
                }

                grdForum.DataSource = dv;
                grdForum.DataBind();
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Event That Fired on RowCommand
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdApproveRowCommand(object sender, GridViewCommandEventArgs e)
        {
            try
            {
                string UserId = Convert.ToString(Session["UserId"]);
                //approve Entity item
                if (e.CommandName.ToLower().Equals("approve"))
                {
                    GridViewRow row = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);
                    CheckBox chApprove = (CheckBox)row.Cells[0].FindControl("chkEnable");
                    string str_Ipad = chApprove.Checked ? " and Enabled On Ipad App" : "";
                    string strEntityId = Convert.ToString(e.CommandArgument);
                    SaveAction("Approved", "Entity", Guid.Parse(UserId), Guid.Parse(strEntityId), chApprove.Checked);
                    ((Label)Info.FindControl("lblName")).Text = "Entity approved Successfully" + str_Ipad;
                    BindData("Entity", Guid.Parse(UserId));
                    Info.Visible = true;
                }

                //reject Entity  item
                if (e.CommandName.ToLower().Equals("decline"))
                {
                    string strEntityId = Convert.ToString(e.CommandArgument);
                    SaveAction("Declined", "Entity", Guid.Parse(UserId), Guid.Parse(strEntityId), false);

                    ((Label)Info.FindControl("lblName")).Text = "Entity Declined Successfully";
                    BindData("Entity", Guid.Parse(UserId));
                    Info.Visible = true;
                }

                if (e.CommandName.ToLower().Equals("view"))
                {
                    string strEntityId = Convert.ToString(e.CommandArgument);
                    EntityDomain objEntity = EntityDataProvider.Instance.Get(Guid.Parse(strEntityId));


                    string str = @"<div  style='margin-bottom:15px'>
                    <table class='datatable'>
                       <tr><td>
                                    <label>
                                    Entity Full Name:
                                    </label>
                                </td>
                          <td>
                  " + objEntity.EntityName + @"
                                </td>

                                        </tr>
                                <tr><td>
                                    <label>
                                    Entity Short Name  :
                                    </label>
                                </td>

                                <td>
                        " + objEntity.EntityShortName + @"
                                </td>
<tr>
                                   <td>
                                    <label>
                                    Enable :
                                    </label>
                                </td>
                                <td>
                              " + objEntity.IsEnable + @"
                                  
                                </td></tr>

                                   <tr><td>
                                    <label>
                                    Entity Logo :
                                    </label>
                                </td>
                                <td>
<img src='img/Uploads/EntityLogo/" + objEntity.EntityLogo + @"'  height='50px' width='50px' alt='logo' ></img>
</td></tr>

                                  <tr><td>
                                    <label>
                                    Created On  :
                                    </label>
                                </td>
                                <td>
" + objEntity.CreatedOn.ToString("dd/MM/yyyy") + @"
</td></tr>
</table>
<div>";
                    lblDetails.Text = str;
                    string strScript = @"<script type='text/javascript'> $(function() {
$( '#dialog' ).attr('title','Entity : " + objEntity.EntityName + @"' );
$( '#dialog' ).attr('style','display:block');
$( '#dialog' ).dialog();});</script>";

                    ClientScript.RegisterStartupScript(this.GetType(), "Success", strScript);

                }


            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Function Used For Gridview Sorting
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdApprove_Sorting(object sender, GridViewSortEventArgs e)
        {
            try
            {
                Guid UserId = Guid.Parse(Session["UserId"].ToString());
                DataTable dt = (DataTable)ApprovalDataProvider.Instance.GetUnApprovedEntity(UserId).AsDataTable();
                DataView dv = new DataView(dt);
                if (Convert.ToString(ViewState["sortDirection"]) == "asc")
                {
                    ViewState["sortDirection"] = "dsc";
                    dv.Sort = e.SortExpression + " DESC";
                }
                else
                {
                    ViewState["sortDirection"] = "asc";
                    dv.Sort = e.SortExpression + " ASC";
                }

                grdApprove.DataSource = dv;
                grdApprove.DataBind();
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Event That Fired on RowCommand
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdMeetingCommand(object sender, GridViewCommandEventArgs e)
        {
            try
            {
                string UserId = Convert.ToString(Session["UserId"]);
                //Meeting Entity item
                if (e.CommandName.ToLower().Equals("approve"))
                {
                    GridViewRow row = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);
                    CheckBox chApprove = (CheckBox)row.Cells[0].FindControl("chkEnable");
                    string str_Ipad = chApprove.Checked ? " and Enabled On Ipad App" : "";
                    string strMeetingId = Convert.ToString(e.CommandArgument);
                    SaveAction("Approved", "Meeting", Guid.Parse(UserId), Guid.Parse(strMeetingId), chApprove.Checked);
                    ((Label)Info.FindControl("lblName")).Text = "Meeting approved Successfully" + str_Ipad;
                    BindData("Meeting", Guid.Parse(UserId));
                    Info.Visible = true;
                }

                //Meeting Entity  item
                if (e.CommandName.ToLower().Equals("decline"))
                {
                    string strMeetingId = Convert.ToString(e.CommandArgument);
                    SaveAction("Declined", "Meeting", Guid.Parse(UserId), Guid.Parse(strMeetingId), false);

                    ((Label)Info.FindControl("lblName")).Text = "Meeting Declined Successfully";
                    BindData("Meeting", Guid.Parse(UserId));
                    Info.Visible = true;
                }

                if (e.CommandName.ToLower().Equals("view"))
                {
                    string strMeetingId = Convert.ToString(e.CommandArgument);
                    string[] ids = strMeetingId.Split(',');
                    MeetingDomain objMeeting = MeetingDataProvider.Instance.Get(Guid.Parse(ids[0]));


                    string str = @"<div  style='margin-bottom:15px'>
                    <table class='datatable'>
<tr>
<td><label>
                                     Entity  Name  :
                                    </label></td>
<td>" + ids[1] + @"<td>
</tr>
                       <tr><td>
                                    <label>
                                     Forum Full Name:
                                    </label>
                                </td>
                          <td>
                  " + ids[2] + @"
                                </td>

                                        </tr>

<tr>
                                   <td>
                                    <label>
                                    Meeting Date :
                                    </label>
                                </td>
                                <td>
                              " + Convert.ToDateTime(objMeeting.MeetingDate).ToString("dd/MM/yyyy") + @"
                                  
                                </td></tr>
                            <tr><td>
                                    <label>
                                    Meeting Time  :
                                    </label>
                                </td>

                                <td>
                        " + objMeeting.MeetingTime + @"
                                </td>
</tr>
                            <tr><td>
                                    <label>
                                     Meeting Venue  :
                                    </label>
                                </td>

                                <td>
                        " + objMeeting.MeetingVenue + @"
                                </td>
</tr>
                                   <tr><td>
                                    <label>
                                    Created On  :
                                    </label>
                                </td>
                                <td>
" + objMeeting.CreatedOn.ToString("dd/MM/yyyy") + @"
</td></tr></table>
<div>";
                    lblDetails.Text = str;
                    string strScript = @"<script type='text/javascript'> $(function() {
$( '#dialog' ).attr('title','Meeting : " + objMeeting.MeetingVenue + @"' );
$( '#dialog' ).attr('style','display:block');
$( '#dialog' ).dialog();});</script>";

                    ClientScript.RegisterStartupScript(this.GetType(), "Success", strScript);

                }
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Function Used For Gridview Sorting
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdMeeting_Sorting(object sender, GridViewSortEventArgs e)
        {
            try
            {
                Guid UserId = Guid.Parse(Session["UserId"].ToString());
                DataTable dt = (DataTable)ApprovalDataProvider.Instance.GetUnApprovedMeetings(UserId).AsDataTable();
                DataView dv = new DataView(dt);
                if (Convert.ToString(ViewState["sortDirection"]) == "asc")
                {
                    ViewState["sortDirection"] = "dsc";
                    dv.Sort = e.SortExpression + " DESC";
                }
                else
                {
                    ViewState["sortDirection"] = "asc";
                    dv.Sort = e.SortExpression + " ASC";
                }

                grdMeeting.DataSource = dv;
                grdMeeting.DataBind();
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Code to PageIndex Changing
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdApprove_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            try
            {
                grdApprove.PageIndex = e.NewPageIndex;
                string UserId = Convert.ToString(Session["UserId"]);
                BindData("Entity", Guid.Parse(UserId));
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Code to PageIndex Changing
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdForum_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            try
            {
                grdForum.PageIndex = e.NewPageIndex;
                string UserId = Convert.ToString(Session["UserId"]);
                BindData("Forum", Guid.Parse(UserId));
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Code to PageIndex Changing
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdMeeting_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            try
            {
                grdMeeting.PageIndex = e.NewPageIndex;
                string UserId = Convert.ToString(Session["UserId"]);
                BindData("Meeting", Guid.Parse(UserId));
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// gridview rowcommand event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdUserCommand(object sender, GridViewCommandEventArgs e)
        {
            try
            {
                string UserId = Convert.ToString(Session["UserId"]);
                //Meeting Entity item
                if (e.CommandName.ToLower().Equals("approve"))
                {
                    GridViewRow row = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);
                    CheckBox chApprove = (CheckBox)row.Cells[0].FindControl("chkEnable");

                    string strApprUserId = Convert.ToString(e.CommandArgument);
                    SaveAction("Approved", "User", Guid.Parse(UserId), Guid.Parse(strApprUserId), chApprove.Checked);
                    ((Label)Info.FindControl("lblName")).Text = "User approved Successfully";
                    SendEmail(Guid.Parse(strApprUserId));
                    BindData("User", Guid.Parse(UserId));
                    Info.Visible = true;
                }

                //Meeting Entity  item
                if (e.CommandName.ToLower().Equals("decline"))
                {
                    string strMeetingId = Convert.ToString(e.CommandArgument);
                    SaveAction("Declined", "User", Guid.Parse(UserId), Guid.Parse(strMeetingId), false);

                    ((Label)Info.FindControl("lblName")).Text = "User Declined Successfully";
                    BindData("User", Guid.Parse(UserId));
                    Info.Visible = true;
                }

                if (e.CommandName.ToLower().Equals("view"))
                {
                    string strUserId = Convert.ToString(e.CommandArgument);

                    UserDomain objUser = UserDataProvider.Instance.Get(Guid.Parse(strUserId));
                    IList<UserEntityDomain> objEntity = UserEntityDataProvider.Instance.GetEntityListByUserId(Guid.Parse(strUserId));
                    string strEntity = "";
                    foreach (UserEntityDomain entity in objEntity)
                    {
                        strEntity += entity.EntityName + "<br/>";
                    }
                    string str = @"<div  style='margin-bottom:15px'>
                    <table class='datatable'>
<tr>
<td><label>
                                    Photograh  :
                                    </label></td>
<td> <img src='img/Uploads/ProfilePic/" + objUser.Photograph + @"' width='50px' height='50px' alt='Photo' /><td>
</tr>
     
<tr>
<td><label>
                                     First  Name  :
                                    </label></td>
<td>" + objUser.FirstName + @"<td>
</tr>
                       <tr><td>
                                    <label>
                                     Last Name:
                                    </label>
                                </td>
                          <td>
                  " + objUser.LastName + @"
                                </td>

                                        </tr>

<tr>
                                   <td>
                                    <label>
                                   Designation :
                                    </label>
                                </td>
                                <td>
                              " + objUser.Designation + @"
                                  
                                </td></tr>

<tr>
                                   <td>
                                    <label>
                                   Pan No :
                                    </label>
                                </td>
                                <td>
                              " + objUser.PANNo + @"
                                  
                                </td></tr>

<tr>
                                   <td>
                                    <label>
                                   Residential Address :
                                    </label>
                                </td>
                                <td>
                              " + objUser.ResidentialAddress + @"
                                  
                                </td></tr>

<tr>
                                   <td>
                                    <label>
                                   Residential Phone No :
                                    </label>
                                </td>
                                <td>
                              " + objUser.ResidencePhone + @"
                                  
                                </td></tr>

<tr>
                                   <td>
                                    <label>
                                 Mobile No :
                                    </label>
                                </td>
                                <td>
                              " + objUser.Mobile + @"
                                  
                                </td></tr>

<tr>
                                   <td>
                                    <label>
                                   DIN No :
                                    </label>
                                </td>
                                <td>
                              " + objUser.DINNumber + @"
                                  
                                </td></tr>
                            <tr><td>
                                    <label>
                                  Office Address  :
                                    </label>
                                </td>

                                <td>
                        " + objUser.OfficeAddress + @"
                                </td>
</tr>
                            <tr><td>
                                    <label>
                                   Office Phone No.  :
                                    </label>
                                </td>

                                <td>
                        " + objUser.OfficePhone + @"
                                </td>
</tr>
                       <tr><td>
                                    <label>
                                    Email Id 1  :
                                    </label>
                                </td>

                                <td>
                        " + objUser.EmailID1 + @"
                                </td>
</tr>
                       <tr><td>
                                    <label>
                                    Email Id 2 :
                                    </label>
                                </td>

                                <td>
                        " + objUser.EmailID2 + @"
                                </td>
</tr>
                           <tr><td>
                                    <label>
                                   Secretary Name  :
                                    </label>
                                </td>

                                <td>
                        " + objUser.SecretaryName + @"
                                </td>
</tr>

  <tr><td>
                                    <label>
                                   Secretary Residental Phone No.:
                                    </label>
                                </td>

                                <td>
                        " + objUser.SecretaryResidentalPhone + @"
                                </td>
</tr>
<tr><td>
                                    <label>
                                Secretary Office Phone  :
                                    </label>
                                </td>

                                <td>
                        " + objUser.SecretaryOfficePhone + @"
                                </td>
</tr>
<tr><td>
                                    <label>
                                   Secretary Mobile No.  :
                                    </label>
                                </td>

                                <td>
                        " + objUser.SecretaryMobile + @"
                                </td>
</tr>
<tr><td>
                                    <label>
                                   Secretary Email Id 1  :
                                    </label>
                                </td>

                                <td>
                        " + objUser.SecretaryEmailID1 + @"
                                </td>
</tr>
<tr><td>
                                    <label>
                                   Secretary Email Id 2  :
                                    </label>
                                </td>

                                <td>
                        " + objUser.SecretaryEmailID2 + @"
                                </td>
</tr>

<tr><td>
                                    <label>
                                   Secretary Enabled on Ipad :
                                    </label>
                                </td>

                                <td>
                        " + objUser.IsEnabledOnIpad + @"
                                </td>
</tr>

<tr><td>
                                    <label>
                                   Secretary Enabled on Web  :
                                    </label>
                                </td>

                                <td>
                        " + objUser.IsEnabledOnWebApp + @"
                                </td>
</tr>
 <tr><td>
                                    <label>
                                    Entity :
                                    </label>
                                </td>
                                <td>
" + strEntity + @"
</td></tr>
                                   <tr><td>
                                    <label>
                                    Created On  :
                                    </label>
                                </td>
                                <td>
" + objUser.CreatedOn.ToString("dd/MM/yyyy") + @"
</td></tr></table>
<div>";
                    lblDetails.Text = str;
                    string strScript = @"<script type='text/javascript'> $(function() {
$( '#dialog' ).attr('title','User : " + objUser.UserName + @"' );
$( '#dialog' ).attr('style','display:block');
$( '#dialog' ).dialog({
                    maxWidth:400,
                    maxHeight: 300,
                    width: 400,
                    height: 300 });});</script>";

                    ClientScript.RegisterStartupScript(this.GetType(), "Success", strScript);

                }

            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Grid view sorting event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdUserSorting(object sender, GridViewSortEventArgs e)
        {
            try
            {
                Guid UserId = Guid.Parse(Session["UserId"].ToString());
                DataTable dt = (DataTable)ApprovalDataProvider.Instance.GetUnApprovedUser(UserId).AsDataTable();
                DataView dv = new DataView(dt);
                if (Convert.ToString(ViewState["sortDirection"]) == "asc")
                {
                    ViewState["sortDirection"] = "dsc";
                    dv.Sort = e.SortExpression + " DESC";
                }
                else
                {
                    ViewState["sortDirection"] = "asc";
                    dv.Sort = e.SortExpression + " ASC";
                }

                grdUser.DataSource = dv;
                grdUser.DataBind();
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// grid view page index change event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdUser_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            try
            {
                grdUser.PageIndex = e.NewPageIndex;
                string UserId = Convert.ToString(Session["UserId"]);
                BindData("User", Guid.Parse(UserId));
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Send email to username and password
        /// </summary>        
        /// <param name="UserId">Guid specifying UserId</param>
        public void SendEmail(Guid UserId)
        {
            try
            {
                UserDomain objUser = UserDataProvider.Instance.Get(UserId);
                if (objUser != null)
                {
                    //Email user name and password

                    string ToEmail = objUser.EmailID1;
                    string UserName = objUser.UserName;
                    string Pass = objUser.Password;

                    string EmailFrom = ConfigurationManager.AppSettings["Email"];
                    string Password = ConfigurationManager.AppSettings["Password"];
                    string EmailSubject = "Your Username and Password";

                    //string strlink = @"http:///Login.aspx";
                    string EmailBody = "<p>";
                    EmailBody += "<table style=\"border-style:none;\"><tr style=\" border-style:none;\"><td>";

                    //<td><img src=" + ("http:// /images/logo.png") + "></img></td>
                    EmailBody += "<font color=\"Teal\"></b> MEETING MINDER  USERNAME AND PASSWORD</b></font></td></tr></table><BR />";
                    EmailBody += "Dear User <BR /><BR />";
                    EmailBody += "Following are your Login Details :-<BR />";

                    EmailBody += "<Table width=\"700px\" style=\"border-color:Teal; height:100px; width:50%; border-style:double;\">";
                    EmailBody += "<tr style=\" border-style:none;\"><td>";

                    EmailBody += "Login Email</td><td> :</td><td>" + UserName + "</td></tr>";
                    EmailBody += "<tr style=\" border-style:none;\"><td>Password</td><td> :</td><td>" + Pass + "</td></tr>";
                    EmailBody += "</table><br /><br /><br />";
                    EmailBody += "&nbsp; Regards <br /> Meeting Minder Admin Team";
                    EmailBody += "</p>";

                    MailMessage objmail = new MailMessage();//(EmailFrom, ToEmail, EmailSubject, EmailBody);
                    SmtpClient SMTPServer = new SmtpClient();

                    SMTPServer = new SmtpClient();
                    System.Net.NetworkCredential SMTPUserInfo = new System.Net.NetworkCredential(EmailFrom, Password);
                    SMTPServer.UseDefaultCredentials = false;
                    SMTPServer.Credentials = SMTPUserInfo;
                    SMTPServer.EnableSsl = true;
                    MailAddress fromAddress = new MailAddress(EmailFrom, "Meeting Minder");
                    objmail.From = fromAddress;
                    objmail.To.Add(ToEmail);
                    objmail.Body = EmailBody;
                    objmail.Subject = EmailSubject;

                    objmail.IsBodyHtml = true;



                    objmail.Headers.Add("NAME", "Admin");

                    SMTPServer.Host = "smtp.gmail.com";
                    SMTPServer.Port = 587;
                    SMTPServer.EnableSsl = true;
                    SMTPServer.Send(objmail);
                    objmail.To.Clear();

                }
                else
                {

                }

            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Gridview rowcommand event 
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdNoticeRowCommand(object sender, GridViewCommandEventArgs e)
        {
            try
            {
                string UserId = Convert.ToString(Session["UserId"]);
                //approve Forum item
                if (e.CommandName.ToLower().Equals("approve"))
                {
                    GridViewRow row = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);
                    CheckBox chApprove = (CheckBox)row.Cells[0].FindControl("chkEnable");
                    string str_Ipad = chApprove.Checked ? " and Enabled On Ipad App" : "";
                    string strForumId = Convert.ToString(e.CommandArgument);
                    SaveAction("Approved", "Notice", Guid.Parse(UserId), Guid.Parse(strForumId), chApprove.Checked);
                    ((Label)Info.FindControl("lblName")).Text = "Notice approved Successfully" + str_Ipad;
                    BindData("Notice", Guid.Parse(UserId));
                    Info.Visible = true;
                }

                //reject Forum  item
                if (e.CommandName.ToLower().Equals("decline"))
                {
                    string strForumId = Convert.ToString(e.CommandArgument);
                    SaveAction("Declined", "Notice", Guid.Parse(UserId), Guid.Parse(strForumId), false);

                    ((Label)Info.FindControl("lblName")).Text = "Notice Declined Successfully";
                    BindData("Notice", Guid.Parse(UserId));
                    Info.Visible = true;
                }


                if (e.CommandName.ToLower().Equals("view"))
                {
                    string strNoticeId = Convert.ToString(e.CommandArgument);
                    string[] ids = strNoticeId.Split(',');
                    NoticeDomain objNotice = NoticeDataProvider.Instance.Get(Guid.Parse(ids[0]));


                    string str = @"<div  style='margin-bottom:15px'>
                    <table class='datatable'>
                       <tr><td>
                                    <label>
                                    Meeting Venue:
                                    </label>
                                </td>
                          <td>
                  " + ids[3] + @"
                                </td>

                                        </tr>
                                <tr><td>
                                    <label>
                                   Meeting Time  :
                                    </label>
                                </td>

                                <td>
                        " + ids[1] + @"
                                </td>
</tr>
<tr>
<td><label>
                                     Meeting Date  :
                                    </label></td>
<td>" + ids[2] + @"<td>
</tr>
<tr>
                                   <td>
                                    <label>
                                    Notice :
                                    </label>
                                </td>
                                <td>
                              " + objNotice.NoticeMessage + @"
                                  
                                </td></tr>

                                   <tr><td>
                                    <label>
                                    Created On  :
                                    </label>
                                </td>
                                <td>
" + objNotice.CreatedOn.ToString("dd/MM/yyyy") + @"
</td></tr></table>
<div>";
                    lblDetails.Text = str;
                    string strScript = @"<script type='text/javascript'> $(function() {
$( '#dialog' ).attr('title','Notice : Meeting' );
$( '#dialog' ).attr('style','display:block');
$( '#dialog' ).dialog();});</script>";

                    ClientScript.RegisterStartupScript(this.GetType(), "Success", strScript);

                }

            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Gridview sorting event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdNotice_Sorting(object sender, GridViewSortEventArgs e)
        {
            try
            {
                Guid UserId = Guid.Parse(Session["UserId"].ToString());
                DataTable dt = (DataTable)NoticeDataProvider.Instance.GetUnapprovedNotice(UserId).AsDataTable();
                DataView dv = new DataView(dt);
                if (Convert.ToString(ViewState["sortDirection"]) == "asc")
                {
                    ViewState["sortDirection"] = "dsc";
                    dv.Sort = e.SortExpression + " DESC";
                }
                else
                {
                    ViewState["sortDirection"] = "asc";
                    dv.Sort = e.SortExpression + " ASC";
                }

                grdNotice.DataSource = dv;
                grdNotice.DataBind();
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Gridview pageindex change event.
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdNotice_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            try
            {
                Guid UserId = Guid.Parse(Session["UserId"].ToString());
                grdNotice.PageIndex = e.NewPageIndex;
                BindNotice(UserId);
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Gridview rowcommand 
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdAgendaCommand(object sender, GridViewCommandEventArgs e)
        {
            try
            {
                string UserId = Convert.ToString(Session["UserId"]);
                //approve Forum item
                if (e.CommandName.ToLower().Equals("approve"))
                {
                    string strForumId = Convert.ToString(e.CommandArgument);
                    GridViewRow row = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);
                    CheckBox chApprove = (CheckBox)row.Cells[0].FindControl("chkEnable");
                    string str_Ipad = chApprove.Checked ? " and Enabled On Ipad App" : "";
                    SaveAction("Approved", "Agenda", Guid.Parse(UserId), Guid.Parse(strForumId), chApprove.Checked);
                    ((Label)Info.FindControl("lblName")).Text = "Agenda approved Successfully" + str_Ipad;
                    BindData("Agenda", Guid.Parse(UserId));
                    Info.Visible = true;
                }

                //reject Forum  item
                if (e.CommandName.ToLower().Equals("decline"))
                {
                    string strForumId = Convert.ToString(e.CommandArgument);
                    SaveAction("Declined", "Agenda", Guid.Parse(UserId), Guid.Parse(strForumId), false);

                    ((Label)Info.FindControl("lblName")).Text = "Agenda Declined Successfully";
                    BindData("Agenda", Guid.Parse(UserId));
                    Info.Visible = true;
                }


                if (e.CommandName.ToLower().Equals("view"))
                {

                    string strMeetingId = Convert.ToString(e.CommandArgument);

                    Guid meetingId;
                    if (Guid.TryParse(strMeetingId, out meetingId))
                    {
                        ViewState["MeetingId"] = meetingId;

                        StringBuilder strMenu = new StringBuilder("");
                        IList<AgendaDomain> objAgentList = AgendaDataProvider.Instance.GetAgendabyMeetingId(meetingId);

                        if (objAgentList.Count > 0)
                        {
                            //get only parent agenda
                            var objParentAgenda = from agend in objAgentList
                                                  where (agend.ParentAgendaId == Guid.Parse("00000000-0000-0000-0000-000000000000"))
                                                  select agend;



                            //get only sub agenda
                            var subAgendaList = from agend in objAgentList
                                                where (agend.ParentAgendaId != Guid.Parse("00000000-0000-0000-0000-000000000000"))
                                                select agend;

                            //get agenda name/note and agenda id
                            var agendaName = (from agend in objParentAgenda

                                              select (new
                                              {
                                                  AgendaName = agend.AgendaName,
                                                  AgendaId = agend.AgendaId,
                                                  UplaodedAgenda = agend.UploadedAgendaNote

                                              })).Distinct().ToList();

                            if (agendaName.Count() > 0)
                            {
                                strMenu.Append("<div id='accordion'><ol id='sort'>");
                                for (int i = 0; i <= agendaName.Count() - 1; i++)
                                {
                                    Guid agendaId = agendaName[i].AgendaId;
                                    if (agendaName[i].UplaodedAgenda.Length > 0)
                                    {
                                        strMenu.Append("<li id=" + agendaId + " class='group' ><h3> <a  href=ViewAgenda.aspx?file=" + agendaName[i].UplaodedAgenda + " Target='_blank'> " + agendaName[i].AgendaName + "</a></h3>");
                                    }
                                    else
                                    {
                                        strMenu.Append("<li id=" + agendaId + " class='group' ><h3>" + agendaName[i].AgendaName + "</h3>");
                                    }

                                    //get sub agenda for parent agenda 
                                    var subAgendaName = (from subAgenda in subAgendaList
                                                         where (subAgenda.ParentAgendaId == agendaId)
                                                         select (new
                                                         {
                                                             AgendaName = subAgenda.AgendaName,
                                                             AgendaId = subAgenda.AgendaId,
                                                             UplaodedAgenda = subAgenda.UploadedAgendaNote
                                                         })).ToList();

                                    //attach sub agenda to parent agenda list element
                                    if (subAgendaName.Count() > 0)
                                    {
                                        strMenu.Append("<div><ol type=a class=ddrag>");
                                        for (int j = 0; j <= subAgendaName.Count() - 1; j++)
                                        {
                                            if (subAgendaName[j].UplaodedAgenda.Length > 0)
                                            {
                                                strMenu.Append("<li id=" + subAgendaName[j].AgendaId + "><a href=ViewAgenda.aspx?file=" + subAgendaName[j].UplaodedAgenda + "  Target='_blank'> " + subAgendaName[j].AgendaName + "</a>");
                                            }
                                            else
                                            {
                                                strMenu.Append("<li id=" + subAgendaName[j].AgendaId + ">" + subAgendaName[j].AgendaName);// + "</li>");
                                            }
                                            Guid subAgendaId = subAgendaName[j].AgendaId;
                                            //Get sub sub agenda
                                            var subSubAgendaName = (from subAgenda in subAgendaList
                                                                    where (subAgenda.ParentAgendaId == subAgendaId)
                                                                    select (new
                                                                    {
                                                                        AgendaName = subAgenda.AgendaName,
                                                                        AgendaId = subAgenda.AgendaId,
                                                                        UplaodedAgenda = subAgenda.UploadedAgendaNote
                                                                    })).ToList();
                                            if (subSubAgendaName.Count() > 0)
                                            {
                                                //attach sub sub agenda to parent agenda list element
                                                strMenu.Append("<ol class=inddrag type=i>");
                                                for (int y = 0; y <= subSubAgendaName.Count() - 1; y++)
                                                {
                                                    if (subSubAgendaName[y].UplaodedAgenda.Length > 0)
                                                    {
                                                        strMenu.Append("<li id=" + subSubAgendaName[y].AgendaId + "><a href=ViewAgenda.aspx?file=" + subSubAgendaName[y].UplaodedAgenda + "  Target='_blank'> " + subSubAgendaName[y].AgendaName + "</a>");
                                                    }
                                                    else
                                                    {
                                                        strMenu.Append("<li id=" + subSubAgendaName[y].AgendaId + ">" + subSubAgendaName[y].AgendaName);
                                                    }
                                                }
                                                strMenu.Append("</ol>");
                                            }
                                            strMenu.Append("</li>");
                                        }
                                        strMenu.Append("</ol></div></li>");
                                    }

                                }
                                strMenu.Append("</ol></div>");
                            }
                        }

                        lblDetails.Text = strMenu.ToString();
                    }


                    string strScript = @"<script type='text/javascript'> $(function() {
$( '#dialog' ).attr('title','Notice : Meeting' );
$( '#dialog' ).attr('style','display:block');
$( '#dialog' ).dialog();});</script>";

                    ClientScript.RegisterStartupScript(this.GetType(), "Success", strScript);
                }

            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Gridview page sorting event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdAgenda_Sorting(object sender, GridViewSortEventArgs e)
        {
            try
            {
                Guid UserId = Guid.Parse(Session["UserId"].ToString());
                DataTable dt = (DataTable)ApprovalDataProvider.Instance.GetUnApprovedMeetingForAgenda(UserId).AsDataTable();
                DataView dv = new DataView(dt);
                if (Convert.ToString(ViewState["sortDirection"]) == "asc")
                {
                    ViewState["sortDirection"] = "dsc";
                    dv.Sort = e.SortExpression + " DESC";
                }
                else
                {
                    ViewState["sortDirection"] = "asc";
                    dv.Sort = e.SortExpression + " ASC";
                }

                grdAgenda.DataSource = dv;
                grdAgenda.DataBind();
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Gridview pageindex change event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdAgenda_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            try
            {
                grdAgenda.PageIndex = e.NewPageIndex;
                string UserId = Convert.ToString(Session["UserId"]);
                BindData("Agenda", Guid.Parse(UserId));
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Gridview row command event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdMinutesRowCommand(object sender, GridViewCommandEventArgs e)
        {
            try
            {
                string UserId = Convert.ToString(Session["UserId"]);
                //Meeting Entity item
                if (e.CommandName.ToLower().Equals("approve"))
                {
                    string strMeetingId = Convert.ToString(e.CommandArgument);

                    GridViewRow row = (GridViewRow)(((LinkButton)e.CommandSource).NamingContainer);
                    CheckBox chApprove = (CheckBox)row.Cells[0].FindControl("chkEnable");
                    string str_Ipad = chApprove.Checked ? " and Enabled On Ipad App" : "";
                    SaveAction("Approved", "Minutes", Guid.Parse(UserId), Guid.Parse(strMeetingId), chApprove.Checked);
                    ((Label)Info.FindControl("lblName")).Text = "Upload minutes approved Successfully" + str_Ipad;
                    BindData("Minutes", Guid.Parse(UserId));
                    Info.Visible = true;
                }

                //Meeting Entity  item
                if (e.CommandName.ToLower().Equals("decline"))
                {
                    string strMeetingId = Convert.ToString(e.CommandArgument);
                    SaveAction("Declined", "Minutes", Guid.Parse(UserId), Guid.Parse(strMeetingId), false);

                    ((Label)Info.FindControl("lblName")).Text = "Upload minutes Declined Successfully";
                    BindData("Minutes", Guid.Parse(UserId));
                    Info.Visible = true;
                }

                if (e.CommandName.ToLower().Equals("view"))
                {
                    string strMinutes = Convert.ToString(e.CommandArgument);
                    string[] ids = strMinutes.Split(',');
                    UploadMinutesDomain objUploadMinutes = UploadMintesDataProvider.Instance.Get(Guid.Parse(ids[0]));


                    string str = @"<div  style='margin-bottom:15px'>
                    <table class='datatable'>
<tr>
<td><label>
                                     Meeting Time  :
                                    </label></td>
<td>" + ids[2] + @"<td>
</tr>
                       <tr><td>
                                    <label>
                                    Meeting Date:
                                    </label>
                                </td>
                          <td>
                  " + ids[1] + @"
                                </td>

                                        </tr>


                            <tr><td>
                                    <label>
                                     Meeting Venue  :
                                    </label>
                                </td>

                                <td>
                        " + ids[3] + @"
                                </td>
</tr>
                                   <tr><td>
                                    <label>
                                    Created On  :
                                    </label>
                                </td>
                                <td>
" + objUploadMinutes.CreatedOn.ToString("dd/MM/yyyy") + @"
</td></tr>

                                   <tr><td>
                                    <label>
                                    Created On  :
                                    </label>
                                </td>
                                <td>
 <a  href='ApprovalMaster.aspx?fileMin=" + objUploadMinutes.UploadFile + @"' target='_blank'  style='color:blue'>View</a>
</td></tr>

</table>
<div>";
                    lblDetails.Text = str;
                    string strScript = @"<script type='text/javascript'> $(function() {
$( '#dialog' ).attr('title','Upload Minutes' );
$( '#dialog' ).attr('style','display:block');
$( '#dialog' ).dialog();});</script>";

                    ClientScript.RegisterStartupScript(this.GetType(), "Success", strScript);

                }
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Gridview Sorting event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdMinutes_Sorting(object sender, GridViewSortEventArgs e)
        {
            try
            {
                Guid UserId = Guid.Parse(Session["UserId"].ToString());
                DataTable dt = (DataTable)UploadMintesDataProvider.Instance.GetUnapprovedMinutes(UserId).AsDataTable();
                DataView dv = new DataView(dt);
                if (Convert.ToString(ViewState["sortDirection"]) == "asc")
                {
                    ViewState["sortDirection"] = "dsc";
                    dv.Sort = e.SortExpression + " DESC";
                }
                else
                {
                    ViewState["sortDirection"] = "asc";
                    dv.Sort = e.SortExpression + " ASC";
                }

                grdMinutes.DataSource = dv;
                grdMinutes.DataBind();
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }

        /// <summary>
        /// Gridview PageIndexChanging event
        /// </summary>
        /// <param name="sender">Object specifying sender</param>
        /// <param name="e">GridViewPageEventArgs specifying e </param>
        protected void grdMinutes_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            try
            {
                grdMinutes.PageIndex = e.NewPageIndex;
                string UserId = Convert.ToString(Session["UserId"]);
                BindData("Minutes", Guid.Parse(UserId));
            }
            catch (Exception ex)
            {
                ((Label)Error.FindControl("lblError")).Text = "Try again after some time";
                Error.Visible = true;
            }
        }
    }
}