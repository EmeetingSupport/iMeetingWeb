using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MM.Domain;
using System.Data;
using MM.Core;
using System.Data.SqlClient;
using Microsoft.ApplicationBlocks.Data;

namespace MM.Data
{
    public class UserDataProvider : DataProvider
    {
        #region "Singleton"

        private static volatile UserDataProvider _instance;
        private static object _synRoot = new Object();

        private UserDataProvider()
        {
        }

        public static UserDataProvider Instance
        {
            get
            {
                if (_instance == null)
                {
                    lock (_synRoot)
                    {
                        if (_instance == null)
                        {
                            _instance = new UserDataProvider();
                        }
                    }
                }
                return _instance;
            }
        }
        #endregion

        #region "Fill"
        /// <summary>
        /// Fill User Detail
        /// </summary>s
        /// <param name="dr">IDataReader sepcifing dr</param>
        /// <returns></returns>
        private UserDomain ToUserDomain(IDataReader dr)
        {
            return new UserDomain()
            {
                UserId = Null.SetNullGuid(dr["UserId"]),
                FirstName = Encryptor.DecryptString(Null.SetNullString(dr["FirstName"])),
                LastName = Encryptor.DecryptString(Null.SetNullString(dr["LastName"])),
                //   Email = Null.SetNullString(dr["Email"]),
                UserName = Encryptor.DecryptString(Null.SetNullString(dr["UserName"])),
                Password = Encryptor.DecryptString(Null.SetNullString(dr["Password"])),
                //  ContactNo = Null.SetNullString(dr["ContactNo"]),
                PANNo = Encryptor.DecryptString(Null.SetNullString(dr["PANNo"])),
                CreatedBy = Null.SetNullGuid(dr["CreatedBy"]),
                CreatedOn = Null.SetNullDateTime(dr["CreatedOn"]),
                UpdatedBy = Null.SetNullGuid(dr["UpdatedBy"]),
                UpdatedOn = Null.SetNullDateTime(dr["UpdatedOn"]),

                Photograph = Encryptor.DecryptString(Null.SetNullString(dr["Photograph"])),
                EntityId = Null.SetNullGuid(dr["EntityId"]),
                OfficeAddress = Encryptor.DecryptString(Null.SetNullString(dr["OfficeAddress"])),
                ResidentialAddress = Encryptor.DecryptString(Null.SetNullString(dr["ResidentialAddress"])),
                DINNumber = Encryptor.DecryptString(Null.SetNullString(dr["DINNumber"])),

                OfficePhone = Encryptor.DecryptString(Null.SetNullString(dr["OfficePhone"])),
                ResidencePhone = Encryptor.DecryptString(Null.SetNullString(dr["ResidencePhone"])),
                Mobile = Encryptor.DecryptString(Null.SetNullString(dr["Moblie"])),
                EmailID1 = Encryptor.DecryptString(Null.SetNullString(dr["EmailID1"])),
                EmailID2 = Encryptor.DecryptString(Null.SetNullString(dr["EmailID2"])),
                SecretaryName = Encryptor.DecryptString(Null.SetNullString(dr["SecretaryName"])),
                SecretaryOfficePhone = Encryptor.DecryptString(Null.SetNullString(dr["SecretaryOfficePhone"])),
                SecretaryResidentalPhone = Encryptor.DecryptString(Null.SetNullString(dr["SecretaryResidentalPhone"])),
                SecretaryMobile = Encryptor.DecryptString(Null.SetNullString(dr["SecretaryMobile"])),
                SecretaryEmailID1 = Encryptor.DecryptString(Null.SetNullString(dr["SecretaryEmailID1"])),
                SecretaryEmailID2 = Encryptor.DecryptString(Null.SetNullString(dr["SecretaryEmailID2"])),
                Designation = Encryptor.DecryptString(Null.SetNullString(dr["Designation"])),
                IsMaker = Null.SetNullBoolean(dr["IsMaker"]),
                IsChecker = Null.SetNullBoolean(dr["IsChecker"]),
                IsEnabledOnIpad = Null.SetNullBoolean(dr["EnabledOnIpad"]),
                IsEnabledOnWebApp = Null.SetNullBoolean(dr["EnabledOnWeb"]),
                UserChecker = Null.SetNullGuid(dr["UserChecker"])
            };
        }




        /// <summary>
        /// Get list of Users
        /// </summary>
        /// <param name="dr">IDataReader sepcifing dr</param>
        /// <returns></returns>
        private IList<UserDomain> ToUserDomains(IDataReader dr)
        {
            IList<UserDomain> user = new List<UserDomain>();
            while (dr.Read())
            {
                user.Add(ToUserDomain(dr));
            }
            return user;
        }
        #endregion

        #region "Get"

        /// <summary>
        /// Get User Detail
        /// </summary>
        /// <param name="UserDomainId">Guid specifying UserDomainId</param>
        /// <returns></returns>      
        public UserDomain Get(Guid UserDomainId)
        {
            UserDomain UserDomain = null;
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString, "stp_GetUserDetailsById", UserDomainId))
            {
                if (!dataReader.Read())
                    return null;
                UserDomain = ToUserDomain(dataReader);
            }
            return UserDomain;
        }
        /// <summary>
        /// Get User Domains Details
        /// </summary>
        /// <returns></returns>
        public IList<UserDomain> Get()
        {
            IList<UserDomain> UserDomains = null;
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString, "stp_GetAllUserDetails"))
            {
                UserDomains = ToUserDomains(dataReader);
            }
            return UserDomains;
        }

        /// <summary>
        /// Get All Checker details 
        /// </summary>
        /// <returns></returns>
        public IList<UserDomain> GetAllChecker()
        {
            IList<UserDomain> UserDomains = null;
            UserDomain objUser = new UserDomain();
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString, "stp_GetAllCkecker"))
            {
                UserDomains = ToUserDomains(dataReader);
            }
            return UserDomains;
        }


        ///// <summary>
        ///// For Authorized Login
        ///// </summary>
        ///// <param name="UserDomainName"></param>
        ///// <param name="UserDomainPassword"></param>
        ///// <returns></returns>
        //public int GetLogin(string UserDomainName, string UserDomainPassword)
        //{

        //    return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, "sp_GetAuthoriziedUserDomainName", UserDomainName, UserDomainPassword));

        //}

        /// <summary>
        /// Get User Password By User-Name
        /// </summary>
        /// <param name="UserName">string specifying UserName</param>
        /// <param name="QuestionId">Guid specifying QuestionId</param>
        /// <param name="Answer">string specifying Answer</param>
        /// <returns></returns>
        public UserDomain GetPassword(string UserName, Guid QuestionId, string Answer)
        {

            //  UserDomain objadmin = new UserDomain();
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString, "stp_GetUserpassword", Encryptor.EncryptString(UserName), QuestionId))
            {
                UserDomain objUser = new UserDomain();
                if (!dataReader.Read())
                    return null;
                else
                {
                    string DbAnswer = Encryptor.DecryptString(Null.SetNullString(dataReader["Answer"]));
                    if (DbAnswer.ToLower().Equals(Answer.ToLower()))
                    {
                        return new UserDomain
                        {

                            Password = Encryptor.DecryptString(Null.SetNullString(dataReader["Password"])),
                            EmailID1 = Encryptor.DecryptString(Null.SetNullString(dataReader["EmailID1"])),

                        };
                    }

                }


                // objadmin = ToUserDomain(dataReader);

            }

            return null;

        }

        /// <summary>
        /// Get User Password By User-Name
        /// </summary>
        /// <param name="UserName">string specifying UserName</param>
        /// <returns></returns>
        public DataTable GetPasswordByUsername(string UserName)
        {
            //  UserDomain objadmin = new UserDomain();
            //using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString, "stp_GetUserpasswordByUsername", Encryptor.EncryptString(UserName)))
            //{
            //    UserDomain objUser = new UserDomain();
            //    if (!dataReader.Read())
            //        return null;
            //    else
            //    {
            //        return new UserDomain
            //        {
            //            Password = Encryptor.DecryptString(Null.SetNullString(dataReader["Password"])),
            //            EmailID1 = Encryptor.DecryptString(Null.SetNullString(dataReader["EmailID1"])),
            //            Designation = Encryptor.DecryptString(Null.SetNullString(dataReader["Answer"])) //Answer
            //        };
            //    }

            //}
            DataSet ds = SqlHelper.ExecuteDataset(ConnectionString, "stp_GetUserpasswordByUsername", Encryptor.EncryptString(UserName));
            if (ds.Tables.Count > 0)
            {
                return ds.Tables[0];
            }
            return null;

        }

        /// <summary>
        /// Change Password Functionality
        /// </summary>
        /// <param name="UserId">Guid specifying UserId</param>
        /// <param name="OldPass">string specifying OldPass</param>
        /// <param name="NewPass">string specifying NewPass</param>
        /// <returns></returns>
        public bool ChangePassword(Guid UserId, string OldPass, string NewPass)
        {
            return Convert.ToInt32(SqlHelper.ExecuteNonQuery(ConnectionString, "stp_UserChangePassword", UserId, Encryptor.EncryptString(OldPass), Encryptor.EncryptString(NewPass))) > 0;
        }

        /// <summary>
        /// Validate email address
        /// </summary>
        /// <param name="UserDomainEmail">string specifying UserDomainEmail</param>
        /// <returns></returns>
        public bool ValidateEmail(string UserDomainEmail)
        {
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, "sp_CheckUserDomainEMail", UserDomainEmail.Trim())) == 0;
        }
        #endregion

        #region "Modify"

        /// <summary>
        /// Insert User Detail
        /// </summary>
        /// <param name="UserDomain">Class object specifying UserDomain</param>
        /// <param name="Entity">Guid specifying Entity</param>
        /// <param name="UserId">Guid specifying UserId</param>
        /// <returns></returns>
        public UserDomain Insert(UserDomain UserDomain, string Entity, Guid UserId)
        {
            SqlParameter p = new SqlParameter();
            p.ParameterName = "UserId";
            p.DbType = DbType.Guid;
            p.Direction = ParameterDirection.Output;
            UserDomain.UserId = (Guid)SqlHelper.ExecuteScalar(ConnectionString, "stp_InsertUserDetails", Encryptor.EncryptString(UserDomain.FirstName), Encryptor.EncryptString(UserDomain.LastName),
                Encryptor.EncryptString(UserDomain.UserName), Encryptor.EncryptString(UserDomain.Password), Encryptor.EncryptString(UserDomain.PANNo), Guid.Parse(UserDomain.CreatedBy.ToString()), Guid.Parse(UserDomain.UpdatedBy.ToString()), true, Encryptor.EncryptString(UserDomain.Photograph), Encryptor.EncryptString(UserDomain.OfficeAddress), Encryptor.EncryptString(UserDomain.ResidentialAddress), Encryptor.EncryptString(UserDomain.DINNumber), Encryptor.EncryptString(UserDomain.OfficePhone), Encryptor.EncryptString(UserDomain.ResidencePhone), Encryptor.EncryptString(UserDomain.Mobile), Encryptor.EncryptString(UserDomain.EmailID1), Encryptor.EncryptString(UserDomain.EmailID2), Encryptor.EncryptString(UserDomain.SecretaryName), Encryptor.EncryptString(UserDomain.SecretaryResidentalPhone), Encryptor.EncryptString(UserDomain.SecretaryOfficePhone), Encryptor.EncryptString(UserDomain.SecretaryMobile), Encryptor.EncryptString(UserDomain.SecretaryEmailID1), Encryptor.EncryptString(UserDomain.SecretaryEmailID2), Encryptor.EncryptString(UserDomain.Designation), UserId,
 Entity, UserDomain.IsMaker, UserDomain.IsChecker, UserDomain.IsEnabledOnIpad, UserDomain.IsEnabledOnWebApp, UserDomain.UserChecker);

            return UserDomain;
        }
        /// <summary>
        /// Delete User By ID
        /// </summary>
        /// <param name="UserId">Guid specifying UserId</param>
        /// <returns></returns>
        public bool Delete(Guid UserId)
        {
            return Convert.ToInt32(SqlHelper.ExecuteNonQuery(ConnectionString, "stp_DeleteUserById", UserId)) > 0;
        }

        /// <summary>
        /// Delete seleted User by id
        /// </summary>
        /// <param name="UserIds">string specifying UserIds</param>
        /// <returns></returns>
        public bool DeleteSelected(string UserIds)
        {
            return Convert.ToInt32(SqlHelper.ExecuteNonQuery(ConnectionString, "stp_DeleteSelectedUserById", UserIds)) > 0;
        }
        /// <summary>
        ///  Update User Details
        /// </summary>
        /// <param name="UserDomain">Class object specifying UserDomain</param>
        /// <param name="EntityIds">Guid specifying EntityIds</param>
        /// <returns></returns>
        public bool Update(UserDomain UserDomain, string EntityIds, string strDeleteEntityIds)
        {
            //return Convert.ToInt32(SqlHelper.ExecuteNonQuery(ConnectionString, "stp_UpdateUserById", UserDomain.UserId, UserDomain.FirstName, UserDomain.LastName, UserDomain.UserName, UserDomain.Password, UserDomain.PANNo, UserDomain.UpdatedBy, UserDomain.EntityId, UserDomain.DINNumber, UserDomain.Photograph, UserDomain.EmailID1, UserDomain.EmailID2, UserDomain.Mobile, UserDomain.OfficeAddress, UserDomain.OfficePhone, UserDomain.ResidencePhone, UserDomain.ResidentialAddress, UserDomain.SecretaryEmailID1, UserDomain.SecretaryEmailID2, UserDomain.SecretaryMobile, UserDomain.SecretaryName, UserDomain.SecretaryOfficePhone, UserDomain.SecretaryResidentalPhone, UserDomain.Designation)) > 0;

            string str = Encryptor.EncryptString(UserDomain.PANNo);

            return Convert.ToInt32(SqlHelper.ExecuteNonQuery(ConnectionString, "stp_UpdateUserById",
                 Encryptor.EncryptString(UserDomain.FirstName), Encryptor.EncryptString(UserDomain.LastName),
                Encryptor.EncryptString(UserDomain.UserName), Encryptor.EncryptString(UserDomain.Password), Guid.Parse(UserDomain.UpdatedBy.ToString()), Encryptor.EncryptString(UserDomain.Photograph), Encryptor.EncryptString(UserDomain.OfficeAddress), Encryptor.EncryptString(UserDomain.ResidentialAddress), Encryptor.EncryptString(UserDomain.DINNumber), Encryptor.EncryptString(UserDomain.PANNo), Encryptor.EncryptString(UserDomain.OfficePhone), Encryptor.EncryptString(UserDomain.ResidencePhone), Encryptor.EncryptString(UserDomain.Mobile), Encryptor.EncryptString(UserDomain.EmailID1), Encryptor.EncryptString(UserDomain.EmailID2), Encryptor.EncryptString(UserDomain.SecretaryName), Encryptor.EncryptString(UserDomain.SecretaryResidentalPhone), Encryptor.EncryptString(UserDomain.SecretaryOfficePhone), Encryptor.EncryptString(UserDomain.SecretaryMobile), Encryptor.EncryptString(UserDomain.SecretaryEmailID1), Encryptor.EncryptString(UserDomain.SecretaryEmailID2), Encryptor.EncryptString(UserDomain.Designation), UserDomain.UserId,
 EntityIds, strDeleteEntityIds, UserDomain.IsMaker, UserDomain.IsChecker, UserDomain.IsEnabledOnIpad, UserDomain.IsEnabledOnWebApp, UserDomain.UserChecker)) > 0;
        }



        /// <summary>
        /// check User login 
        /// </summary>
        /// <param name="UserName">string specifying UserName</param>
        /// <param name="Password">string specifying Password</param>
        /// <returns></returns>
        public UserDomain UserLogin(string UserName, string Password)
        {
            UserDomain objUserDomain = null;
            string str = Encryptor.EncryptString(UserName);
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString, "stp_UserLogin", Encryptor.EncryptString(UserName), Encryptor.EncryptString(Password)))
            {
                if (!dataReader.Read())
                    return null;
                objUserDomain = ToUserDomain(dataReader);

                objUserDomain.IsAuthorized = Null.SetNullBoolean(dataReader["IsAuthorized"]);


            }
            return objUserDomain;
        }


        /// <summary>
        /// check User ipad login 
        /// </summary>
        /// <param name="UserName">string specifying UserName</param>
        /// <param name="Password">string specifying Password</param>
        /// <returns></returns>
        public UserDomain UserLoginIpad(string UserName, string Password, string UdId)
        {
            UserDomain objUserDomain = null;
            string str = Encryptor.EncryptString(UserName);

            //DataSet ds = SqlHelper.ExecuteDataset(ConnectionString, "stp_UserLogin_Ipad", Encryptor.EncryptString(UserName), Encryptor.EncryptString(Password));
            //if (ds.Tables.Count > 0)
            //{
            //    objUserDomain.UserId = Null.SetNullGuid(ds.Tables[0].Rows[0]["UserId"]);
            //    objUserDomain.FirstName = Encryptor.DecryptString(Null.SetNullString(ds.Tables[0].Rows[0]["FirstName"]));
            //    objUserDomain.LastName = Encryptor.DecryptString(Null.SetNullString(ds.Tables[0].Rows[0]["LastName"]));
            //    objUserDomain.IsAuthorized = Null.SetNullBoolean(ds.Tables[0].Rows[0]["IsAuthorized"]);
            //    objUserDomain.SecurityQuestionId = Null.SetNullGuid(ds.Tables[0].Rows[0]["SecurityQuestionId"]);
            //    objUserDomain.Answer = Encryptor.DecryptString(Null.SetNullString(ds.Tables[0].Rows[0]["Answer"]));
            //    objUserDomain.Token = Null.SetNullString(ds.Tables[0].Rows[0]["Token"]);
            //    objUserDomain.IsEnabledOnIpad = Null.SetNullBoolean(ds.Tables[0].Rows[0]["EnabledOnIpad"]);

            //}
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString, "stp_UserLogin_Ipad", Encryptor.EncryptString(UserName), Encryptor.EncryptString(Password), UdId))
            {
                if (!dataReader.Read())
                    return null;
                else
                {
                    objUserDomain = new UserDomain();
                    objUserDomain.UserId = Null.SetNullGuid(dataReader["UserId"]);
                    objUserDomain.FirstName = Encryptor.DecryptString(Null.SetNullString(dataReader["FirstName"]));
                    objUserDomain.LastName = Encryptor.DecryptString(Null.SetNullString(dataReader["LastName"]));
                    objUserDomain.IsAuthorized = Null.SetNullBoolean(dataReader["IsAuthorized"]);
                    objUserDomain.SecurityQuestionId = Null.SetNullGuid(dataReader["SecurityQuestionId"]);
                    objUserDomain.Answer = Encryptor.DecryptString(Null.SetNullString(dataReader["Answer"]));
                    objUserDomain.Token = Null.SetNullString(dataReader["Token"]);
                    objUserDomain.IsEnabledOnIpad = Null.SetNullBoolean(dataReader["EnabledOnIpad"]);
                }

            }
            return objUserDomain;
        }

        /// <summary>
        /// Get user having access rights
        /// </summary>
        /// <returns></returns>
        public IList<UserDomain> GetAllUserByAccessRight()
        {

            IList<UserDomain> UserDomains = null;
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString, "stp_UserByAccessRight"))
            {
                UserDomains = ToUserDomains(dataReader);
            }
            return UserDomains;
        }

        /// <summary>
        /// Get All User for Access Right
        /// </summary>
        /// <returns></returns>
        public IList<UserDomain> GetAllUserForAccessRight()
        {
            IList<UserDomain> UserDomains = null;
            using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString, "stp_GetUserForAccessRight"))
            {
                UserDomains = ToUserDomains(dataReader);
            }
            return UserDomains;

        }

        /// <summary>
        /// Get password for wcf services
        /// </summary>
        /// <param name="UserName">string specifying UserName</param>
        /// <param name="QuestionId">Guid specifying QuestionId</param>
        /// <param name="Answer">string specifying Answer</param>
        /// <returns></returns>
        public string GetForgetPassword(string UserName, Guid QuestionId, string Answer)
        {
            DataSet ds = (DataSet)SqlHelper.ExecuteDataset(ConnectionString, "stp_GetPasswordForWCF", UserName, QuestionId);
            string password = "";
            if (ds.Tables.Count > 0)
            {
                string Ans = Encryptor.DecryptString(ds.Tables[0].Rows[0]["Answer"].ToString());
                if (Ans.ToLower().Equals(Answer.ToLower()))
                {
                    password = Encryptor.DecryptString(ds.Tables[0].Rows[0]["Password"].ToString());
                }
            }
            return password;
        }

        /// <summary>
        /// Check emailid existance
        /// </summary>
        /// <param name="strEmail">string specifying strEmail</param>
        /// <returns></returns>
        public int CheckEmailExistance(string strEmail)
        {
            return (int)SqlHelper.ExecuteScalar(ConnectionString, "stp_CheckEmailIdExistance", Encryptor.EncryptString(strEmail));
        }


        /// <summary>
        /// Check Username existance
        /// </summary>
        /// <param name="strEmail">string specifying strEmail</param>
        /// <returns></returns>
        public int CheckUserNameExistance(string UserName)
        {
            return (int)SqlHelper.ExecuteScalar(ConnectionString, "stp_CheckUserNameExitance", Encryptor.EncryptString(UserName));
        }
        #endregion
    }
}
